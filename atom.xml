<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>夜阑卧听风吹雨的博客</title>
  
  <subtitle>心中有丘壑，眉目做山河</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-27T09:03:35.905Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zippo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JAVA8 新的时间和日期API</title>
    <link href="http://yoursite.com/2019/04/01/java8date/"/>
    <id>http://yoursite.com/2019/04/01/java8date/</id>
    <published>2019-04-01T07:17:42.000Z</published>
    <updated>2019-03-27T09:03:35.905Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java8日期-时间的介绍"><a href="#Java8日期-时间的介绍" class="headerlink" title="Java8日期/时间的介绍"></a>Java8日期/时间的介绍</h1><p>Java 8 日期/时间（Date/Time）API 是开发人员最受追捧的变化之一，java从一开始就没有对日期时间处理的一致性方法，因此日期/时间API也是除Java核心API以外另一项倍受欢迎的内容。</p><h2 id="Java8-中新的时间日期API解决了什么问题？"><a href="#Java8-中新的时间日期API解决了什么问题？" class="headerlink" title="Java8 中新的时间日期API解决了什么问题？"></a>Java8 中新的时间日期API解决了什么问题？</h2><p>1.java8 之前的日期/时间类的定义不一致，在java.util和java.sql的包中都有日期类，此外用于格式化和解析的类(SimpleDateFormat)在java.text包中定义。</p><p>2.所以的日期类都是可变的，因此他们都不是线程安全的，这是Java日期类的最大的问题之一。</p><p>3.日期类并不提供国际化。</p><p>4.月份从<strong>o</strong>开始计算。</p><h2 id="Java8-日期时间API的介绍"><a href="#Java8-日期时间API的介绍" class="headerlink" title="Java8 日期时间API的介绍"></a>Java8 日期时间API的介绍</h2><p>Java 8  日期/时间（java.time包下）主要介绍LocalDate 、 LocalTime 、 Instant 、 Duration 以及 Period</p><p>1.使用 LocalDate 和 LocalTime</p><p>①LocalDate:该类的实例是一个不可变的对象，只提供了简单的日期，并不包含当天的时间信息，也不附带任何与时区相关的信息。代码清单如下：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 使用localDate 静态工厂方法of 创建一个LocalDate实例</span><br><span class="line">LocalDate date = LocalDate.of(2019, 3, 26);</span><br><span class="line">// 获取年月日 API</span><br><span class="line">//年</span><br><span class="line">int year = date.getYear();</span><br><span class="line">// 月</span><br><span class="line">Month month = date.getMonth();</span><br><span class="line">// 日</span><br><span class="line">int dayOfMonth = date.getDayOfMonth();</span><br><span class="line">// 星期几</span><br><span class="line">DayOfWeek dayOfWeek = date.getDayOfWeek();</span><br><span class="line">// 这月有多少天</span><br><span class="line">int i = date.lengthOfMonth();</span><br><span class="line">// 是否为闰年</span><br><span class="line">boolean leapYear = date.isLeapYear();</span><br><span class="line">// 获取当前系统时间</span><br><span class="line">LocalDate today = LocalDate.now();</span><br></pre></td></tr></table></figure><p>②LocalTime:该类表示一天中的时间，可以通过静态工程方法of创建实例，of有两个重载的方法，第一个方法可以传入小时，分钟。第二个方法可以传入时分秒。代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 创建 LocalTime 实例</span><br><span class="line">LocalTime time = LocalTime.of(21, 12, 20);</span><br><span class="line">//  获取小时</span><br><span class="line">int hour = time.getHour();</span><br><span class="line">// 获取分钟</span><br><span class="line">int minute = time.getMinute();</span><br><span class="line">// 获取 秒</span><br><span class="line">int second = time.getSecond();</span><br></pre></td></tr></table></figure><p>总结：LocalTime和LocalDate都可以通过解析代表他们的字符串创建，使用静态方法parse,如若传递的字符串无法被解析为合法的LocalDate和LocalTime 就会抛出一个继承与RuntimeException的DateTimePaseException异常。代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LocalTime time = LocalTime.parse(&quot;21:19:00&quot;);</span><br><span class="line">LocalDate date = LocalDate.parse(&quot;2019-3-26&quot;);</span><br></pre></td></tr></table></figure><p>2.LocalDateTime:该类是LocalDate和LocalTime的合体。它同时表示了日期和时间，但不带有时区信息。</p><p>①创建LocalDateTime 对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LocalTime time = LocalTime.parse(&quot;21:19:00&quot;);</span><br><span class="line">LocalDate date = LocalDate.parse(&quot;2019-3-26&quot;);</span><br><span class="line">LocalDateTime dateTime = LocalDateTime.of(2019, 3, 26, 21, 26, 55);</span><br><span class="line">LocalDateTime dateTime1 = LocalDateTime.of(date, time);</span><br><span class="line">LocalDateTime dateTime2 = date.atTime(21, 28, 45);</span><br><span class="line">LocalDateTime dateTime3 = date.atTime(time);</span><br><span class="line">LocalDateTime dateTime4 = time.atDate(date);</span><br></pre></td></tr></table></figure><p>②从LocalDateTime中提取出LocalDate和LocaTime:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LocalDate localDate = dateTime.toLocalDate();</span><br><span class="line">LocalTime localTime = dateTime.toLocalTime();</span><br></pre></td></tr></table></figure><p>3.Instant :该类表示的是距离UTC时区1970年1月1日午夜时分的毫秒数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 获取当前时间戳</span><br><span class="line">Instant now = Instant.now();</span><br><span class="line">//获取当前的时间，获取的是当前的美国时间，和处于东八区的我们相差八个小时。</span><br><span class="line">System.out.println(now);//  输出结果 ：2019-03-26T13:53:42.642Z</span><br><span class="line">// 设置偏移量</span><br><span class="line">OffsetDateTime offsetDateTime = now.atOffset(ZoneOffset.ofHours(8));</span><br><span class="line">System.out.println(offsetDateTime);// 输出结果 2019-03-26T21:56:20.915+08:00</span><br><span class="line">// 获取默认时区时间</span><br><span class="line">ZonedDateTime zonedDateTime = now.atZone(ZoneId.systemDefault());</span><br><span class="line">System.out.println(zonedDateTime); // 输出结果 2019-03-26T22:00:24.783+08:00[Asia/Shanghai]</span><br><span class="line">//在计算机元年（1970-01-01  00：00：00）的基础上增加秒数</span><br><span class="line">Instant instant = Instant.ofEpochSecond(200);</span><br><span class="line">System.out.println(instant); // 输出结果 ：1970-01-01T00:03:20Z</span><br></pre></td></tr></table></figure><p>4.Duration:该类是用来表示时间之间间隔，经常和Instant集合起来使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Instant inst1 = Instant.now();</span><br><span class="line">System.out.println(&quot;Inst1 : &quot; + inst1); // Inst1 : 2019-03-26T14:21:14.343Z</span><br><span class="line">Instant inst2 = inst1.plus(Duration.ofSeconds(10));</span><br><span class="line">System.out.println(&quot;Inst2 : &quot; + inst2); // Inst2 : 2019-03-26T14:21:24.343Z</span><br><span class="line">System.out.println(&quot;Difference in milliseconds : &quot; + Duration.between(inst1, inst2).toMillis()); //Difference in milliseconds : 10000</span><br><span class="line">System.out.println(&quot;Difference in seconds : &quot; + Duration.between(inst1, inst2).getSeconds());  // Difference in seconds : 10</span><br></pre></td></tr></table></figure><p>5.Period：用来计算日期之间的间隔，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LocalDate today = LocalDate.now();</span><br><span class="line">System.out.println(&quot;Today : &quot; + today); // Today : 2019-03-26</span><br><span class="line">LocalDate birthDate = LocalDate.of(1995, Month.OCTOBER, 19);</span><br><span class="line">System.out.println(&quot;BirthDate : &quot; + birthDate); // BirthDate : 1995-10-19</span><br><span class="line">Period p = Period.between(birthDate, today);</span><br><span class="line">System.out.printf(&quot;年龄 : %d 年 %d 月 %d 日&quot;, p.getYears(), p.getMonths(), p.getDays());// 年龄 : 23 年 5 月 7 日</span><br></pre></td></tr></table></figure><p>6.ChronoUnit：用于在单个时间单位内测量一段时间，例如天数或秒。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LocalDate start = LocalDate.of(1995,10, 11);</span><br><span class="line">System.out.println(&quot;开始时间：&quot;+start);//开始时间：1995-10-11</span><br><span class="line">LocalDate end = LocalDate.now();</span><br><span class="line">System.out.println(&quot;结束时间:&quot;+end);// 结束时间:2019-03-26</span><br><span class="line">long day = ChronoUnit.DAYS.between(start, end);</span><br><span class="line">System.out.println(&quot;两个时间相差多少天&quot;+day);//两个时间相差多少天8567</span><br></pre></td></tr></table></figure><h2 id="操纵，解析，格式化日期"><a href="#操纵，解析，格式化日期" class="headerlink" title="操纵，解析，格式化日期"></a>操纵，解析，格式化日期</h2><h3 id="操纵日期"><a href="#操纵日期" class="headerlink" title="操纵日期"></a>操纵日期</h3><p>1.当我们得到了一个LocalDate对象后，想要创建一个它的修改版，可以使用他的withAttribute方法。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LocalDate date = LocalDate.now();</span><br><span class="line">System.out.println(&quot;当前时间：&quot;+date); // 当前时间：2019-03-26</span><br><span class="line">LocalDate localDate = date.withYear(2018);</span><br><span class="line">System.out.println(&quot;修改年之后：&quot;+localDate); // 2018-03-26</span><br><span class="line">LocalDate localDate1 = date.withMonth(1);</span><br><span class="line">System.out.println(&quot;修改月之后的：&quot;+localDate1);// 2019-01-26</span><br></pre></td></tr></table></figure><p>2.TemporalAdjuster:使用该类完成一些复杂的业务需求，如将时间调整到下个工作日，下个周日，或者是本月的最后一天。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LocalDate date1 = LocalDate.of(2019, 3, 26);</span><br><span class="line">System.out.println(&quot;当前时间：&quot;+date1);// 当前时间：2019-03-26</span><br><span class="line">LocalDate date2 = date1.with(nextOrSame(DayOfWeek.SUNDAY));</span><br><span class="line">System.out.println(&quot;下一个星期天：&quot;+date2);//下一个星期天：2019-03-31</span><br><span class="line">LocalDate date3 = date2.with(lastDayOfMonth());</span><br><span class="line">System.out.println(&quot;这个月的最后一天：&quot;+date3);//这个月的最后一天：2019-03-31</span><br></pre></td></tr></table></figure><p>更多api如下图：</p><p><img src="/2019/04/01/java8date/TemporalAdjuster.jpg" alt></p><p>3.自定义一个TemporalAdjuster：</p><p>设计一个 NextWorkingDay 类，该类实现了 TemporalAdjuster 接口，能够计算明天<br>的日期，同时过滤掉周六和周日这些节假日。格式如下所示：<br>date = date.with(new NextWorkingDay());<br>如果当天的星期介于周一至周五之间，日期向后移动一天；如果当天是周六或者周日，则<br>返回下一个周一。代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class NextWorkDayTemporalAdjuster implements TemporalAdjuster &#123;</span><br><span class="line">        // 如果当前时间是星期到星期五 就加一天 如果是想起六天 就返回下个星期一的时间</span><br><span class="line">        @Override</span><br><span class="line">        public Temporal adjustInto(Temporal temporal) &#123;</span><br><span class="line">            DayOfWeek now = DayOfWeek.of( temporal.get(ChronoField.DAY_OF_WEEK));</span><br><span class="line">            // 默认是加一天</span><br><span class="line">            int dayofAdd=1;</span><br><span class="line">            // 如果是星期五 就加三天</span><br><span class="line">            if (now==DayOfWeek.FRIDAY)dayofAdd=3;</span><br><span class="line">            else if (now==DayOfWeek.FRIDAY) dayofAdd=2;</span><br><span class="line">            return temporal.plus(dayofAdd, ChronoUnit.DAYS);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.使用自己的自定义的TemporalAdjuster：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LocalDate now = LocalDate.now();</span><br><span class="line">DateTimeFormatter yyyyMMdd = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">String format = yyyyMMdd.format(now);</span><br><span class="line">System.out.println(&quot;当前时间为：&quot;+format);// 当前时间为：2019-03-27</span><br><span class="line">LocalDate with = now.with(new NextWorkDayTemporalAdjuster());</span><br><span class="line">DateTimeFormatter yyyyMMdd1 = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">String formatafter = yyyyMMdd.format(with);</span><br><span class="line">System.out.println(&quot;下一个工作日为：&quot;+formatafter);// 下一个工作日为：2019-03-28</span><br></pre></td></tr></table></figure><h3 id="解析，格式化日期"><a href="#解析，格式化日期" class="headerlink" title="解析，格式化日期"></a>解析，格式化日期</h3><p>1.在日常工作经常会遇到需要指定格式的日期时间，在java.time.format包下的DateTimeFormatter 可以满足我们的这一需求。代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LocalDate now = LocalDate.now();</span><br><span class="line">DateTimeFormatter yyyyMMdd = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">String format = yyyyMMdd.format(now);</span><br><span class="line">System.out.println(&quot;当前时间为：&quot;+format);// 当前时间为：2019-03-27</span><br></pre></td></tr></table></figure><h2 id="java-8-中不同的时区和历法的问题的解决方案"><a href="#java-8-中不同的时区和历法的问题的解决方案" class="headerlink" title="java 8 中不同的时区和历法的问题的解决方案"></a>java 8 中不同的时区和历法的问题的解决方案</h2><p>新的 java.time.ZoneId类是老版 java.util.TimeZone 的替代品。它的设计目标就是要让你无需为时区处理的复杂和<br>繁琐而操心，比如处理日光时（Daylight Saving Time，DST）这种问题。跟其他日期和时间类一样， ZoneId 类也是无法修改的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java8日期-时间的介绍&quot;&gt;&lt;a href=&quot;#Java8日期-时间的介绍&quot; class=&quot;headerlink&quot; title=&quot;Java8日期/时间的介绍&quot;&gt;&lt;/a&gt;Java8日期/时间的介绍&lt;/h1&gt;&lt;p&gt;Java 8 日期/时间（Date/Time）API 是开发人员最受追捧的变化之一，java从一开始就没有对日期时间处理的一致性方法，因此日期/时间API也是除Java核心API以外另一项倍受欢迎的内容。&lt;/p&gt;
&lt;h2 id=&quot;Java8-中新的时间日期API解决了什么问题？&quot;&gt;&lt;a href=&quot;#Java8-中新的时间日期API解决了什么问题？&quot; class=&quot;headerlink&quot; title=&quot;Java8 中新的时间日期API解决了什么问题？&quot;&gt;&lt;/a&gt;Java8 中新的时间日期API解决了什么问题？&lt;/h2&gt;&lt;p&gt;1.java8 之前的日期/时间类的定义不一致，在java.util和java.sql的包中都有日期类，此外用于格式化和解析的类(SimpleDateFormat)在java.text包中定义。&lt;/p&gt;
&lt;p&gt;2.所以的日期类都是可变的，因此他们都不是线程安全的，这是Java日期类的最大的问题之一。&lt;/p&gt;
&lt;p&gt;3.日期类并不提供国际化。&lt;/p&gt;
&lt;p&gt;4.月份从&lt;strong&gt;o&lt;/strong&gt;开始计算。&lt;/p&gt;
&lt;h2 id=&quot;Java8-日期时间API的介绍&quot;&gt;&lt;a href=&quot;#Java8-日期时间API的介绍&quot; class=&quot;headerlink&quot; title=&quot;Java8 日期时间API的介绍&quot;&gt;&lt;/a&gt;Java8 日期时间API的介绍&lt;/h2&gt;&lt;p&gt;Java 8  日期/时间（java.time包下）主要介绍LocalDate 、 LocalTime 、 Instant 、 Duration 以及 Period&lt;/p&gt;
&lt;p&gt;1.使用 LocalDate 和 LocalTime&lt;/p&gt;
&lt;p&gt;①LocalDate:该类的实例是一个不可变的对象，只提供了简单的日期，并不包含当天的时间信息，也不附带任何与时区相关的信息。代码清单如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="java8" scheme="http://yoursite.com/tags/java8/"/>
    
  </entry>
  
  <entry>
    <title>JAVA8使用Stream处理集合</title>
    <link href="http://yoursite.com/2019/03/30/java8Stream/"/>
    <id>http://yoursite.com/2019/03/30/java8Stream/</id>
    <published>2019-03-30T03:09:00.000Z</published>
    <updated>2019-03-30T04:13:20.918Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h1><h2 id="Stream是什么？"><a href="#Stream是什么？" class="headerlink" title="Stream是什么？"></a>Stream是什么？</h2><p><strong>Stream 使用一种类似用 SQL 语句从数据库查询数据的直观方式来提供一种对 Java 集合运算和表达的高阶抽象</strong>。</p><p>Stream API可以极大提高Java程序员的生产力，让程序员写出高效率、干净、简洁的代码。</p><p>这种风格将要处理的元素集合看作一种流，流在管道中传输，并且可以在管道的节点上进行处理，比如筛选，排序，聚合等。</p><p>Stream有以下特性及优点：</p><ul><li>无存储。Stream不是一种数据结构，它只是某种数据源的一个视图，数据源可以是一个数组，Java容器或I/O channel等。</li><li>为函数式编程而生。对Stream的任何修改都不会修改背后的数据源，比如对Stream执行过滤操作并不会删除被过滤的元素，而是会产生一个不包含被过滤元素的新Stream。</li><li>惰式执行。Stream上的操作并不会立即执行，只有等到用户真正需要结果的时候才会执行。</li><li>可消费性。Stream只能被“消费”一次，一旦遍历过就会失效，就像容器的迭代器那样，想要再次遍历必须重新生成。</li></ul><p>我们举一个例子，来看一下到底Stream可以做什么事情：</p><p><img src="/2019/03/30/java8Stream/java8stream.png" alt></p><p>上面的例子中，获取一些带颜色塑料球作为数据源，首先过滤掉红色的、把它们融化成随机的三角形。再过滤器并删除小的三角形。最后计算出剩余图形的周长。</p><p>如上图，对于流的处理，主要有三种关键性操作：分别是流的创建、中间操作（intermediate operation）以及最终操作(terminal operation)。</p><a id="more"></a><h2 id="如何使用Stream"><a href="#如何使用Stream" class="headerlink" title="如何使用Stream?"></a>如何使用Stream?</h2><p><strong>在Java 8中，可以有多种方法来创建流。</strong></p><p><strong>1、通过已有的集合来创建流</strong></p><p>在Java 8中，除了增加了很多Stream相关的类以外，还对集合类自身做了增强，在其中增加了stream方法，可以将一个集合类转换成流。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; strings = Arrays.asList(&quot;zippo&quot;, &quot;zp&quot;, &quot;zulongbo&quot;, &quot;Hello&quot;, &quot;HelloWorld&quot;);</span><br><span class="line">Stream&lt;String&gt; stream = strings.stream();</span><br></pre></td></tr></table></figure><p>以上，通过一个已有的List创建一个流。除此以外，还有一个parallelStream方法，可以为集合创建一个并行流。</p><p>这种通过集合创建出一个Stream的方式也是比较常用的一种方式。</p><p><strong>2、通过Stream创建流</strong></p><p>可以使用Stream类提供的方法，直接返回一个由指定元素组成的流。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.of(&quot;zippo&quot;, &quot;zp&quot;, &quot;zulongbo&quot;, &quot;Hello&quot;, &quot;HelloWorld&quot;);</span><br></pre></td></tr></table></figure><p>如以上代码，直接通过of方法，创建并返回一个Stream。</p><h2 id="Stream的中间操作"><a href="#Stream的中间操作" class="headerlink" title="Stream的中间操作"></a>Stream的中间操作</h2><p><strong>Stream有很多中间操作，多个中间操作可以连接起来形成一个流水线，每一个中间操作就像流水线上的一个工人，每人工人都可以对流进行加工，加工后得到的结果还是一个流。</strong></p><p><img src="/2019/03/30/java8Stream/liushui.jpg" alt></p><p>以下是常用的中间操作列表:</p><p><img src="/2019/03/30/java8Stream/streamapi.png" alt="img"></p><p><strong>filter</strong></p><p>filter 方法用于通过设置的条件过滤出元素。以下代码片段使用 filter 方法过滤掉空字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; strings = Arrays.asList(&quot;Hollis&quot;, &quot;&quot;, &quot;HollisChuang&quot;, &quot;H&quot;, &quot;hollis&quot;);</span><br><span class="line">strings.stream().filter(string -&gt; !string.isEmpty()).forEach(System.out::println);</span><br><span class="line">//Hollis, , HollisChuang, H, hollis</span><br></pre></td></tr></table></figure><p><strong>map</strong></p><p>map 方法用于映射每个元素到对应的结果，以下代码片段使用 map 输出了元素对应的平方数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(3, 2, 2, 3, 7, 3, 5);</span><br><span class="line">numbers.stream().map( i -&gt; i*i).forEach(System.out::println);</span><br><span class="line">//9,4,4,9,49,9,25</span><br></pre></td></tr></table></figure><p><strong>limit/skip</strong></p><p>limit 返回 Stream 的前面 n 个元素；skip 则是扔掉前 n 个元素。以下代码片段使用 limit 方法保理4个元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(3, 2, 2, 3, 7, 3, 5);</span><br><span class="line">numbers.stream().limit(4).forEach(System.out::println);</span><br><span class="line">//3,2,2,3</span><br></pre></td></tr></table></figure><p><strong>sorted</strong></p><p>sorted 方法用于对流进行排序。以下代码片段使用 sorted 方法进行排序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(3, 2, 2, 3, 7, 3, 5);</span><br><span class="line">numbers.stream().sorted().forEach(System.out::println);</span><br><span class="line">//2,2,3,3,3,5,7</span><br></pre></td></tr></table></figure><p><strong>distinct</strong></p><p>distinct主要用来去重，以下代码片段使用 distinct 对元素进行去重：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(3, 2, 2, 3, 7, 3, 5);</span><br><span class="line">numbers.stream().distinct().forEach(System.out::println);</span><br><span class="line">//3,2,7,5</span><br></pre></td></tr></table></figure><p>接下来我们通过一个例子和一张图，来演示下，当一个Stream先后通过filter、map、sort、limit以及distinct处理后会发生什么。</p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; strings = Arrays.asList(&quot;Hollis&quot;, &quot;HollisChuang&quot;, &quot;hollis&quot;, &quot;Hello&quot;, &quot;HelloWorld&quot;, &quot;Hollis&quot;);</span><br><span class="line">Stream s = strings.stream().filter(string -&gt; string.length()&lt;= 6).map(String::length).sorted().limit(3)</span><br><span class="line">            .distinct();</span><br></pre></td></tr></table></figure><p>过程及每一步得到的结果如下图：</p><p><img src="/2019/03/30/java8Stream/last.png" alt="img"></p><h2 id="Stream的最终操作"><a href="#Stream的最终操作" class="headerlink" title="Stream的最终操作"></a>Stream的最终操作</h2><p><strong>Stream的中间操作得到的结果还是一个Stream，那么如何把一个Stream转换成我们需要的类型呢？比如计算出流中元素的个数、将流装换成集合等。这就需要最终操作（terminal operation）</strong></p><p><strong>最终操作会消耗流，产生一个最终结果。也就是说，在最终操作之后，不能再次使用流，也不能在使用任何中间操作，否则将抛出异常：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalStateException: stream has already been operated upon or closed</span><br></pre></td></tr></table></figure><p>俗话说，“你永远不会两次踏入同一条河”也正是这个意思。</p><p>常用的最终操作如下图：￼</p><p><img src="/2019/03/30/java8Stream/last1.png" alt="img"></p><p><strong>forEach</strong></p><p>Stream 提供了方法 ‘forEach’ 来迭代流中的每个数据。以下代码片段使用 forEach 输出了10个随机数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Random random = new Random();</span><br><span class="line">random.ints().limit(10).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p><strong>count</strong></p><p>count用来统计流中的元素个数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; strings = Arrays.asList(&quot;Hollis&quot;, &quot;HollisChuang&quot;, &quot;hollis&quot;,&quot;Hollis666&quot;, &quot;Hello&quot;, &quot;HelloWorld&quot;, &quot;Hollis&quot;);</span><br><span class="line">System.out.println(strings.stream().count());</span><br><span class="line">//7</span><br></pre></td></tr></table></figure><p><strong>collect</strong></p><p>collect就是一个归约操作，可以接受各种做法作为参数，将流中的元素累积成一个汇总结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; strings = Arrays.asList(&quot;Hollis&quot;, &quot;HollisChuang&quot;, &quot;hollis&quot;,&quot;Hollis666&quot;, &quot;Hello&quot;, &quot;HelloWorld&quot;, &quot;Hollis&quot;);</span><br><span class="line">strings  = strings.stream().filter(string -&gt; string.startsWith(&quot;Hollis&quot;)).collect(Collectors.toList());</span><br><span class="line">System.out.println(strings);</span><br><span class="line">//Hollis, HollisChuang, Hollis666, Hollis</span><br></pre></td></tr></table></figure><p>接下来，我们还是使用一张图，来演示下，前文的例子中，当一个Stream先后通过filter、map、sort、limit以及distinct处理后会，在分别使用不同的最终操作可以得到怎样的结果。</p><p>下图，展示了文中介绍的所有操作的位置、输入、输出以及使用一个案例展示了其结果。</p><p><img src="/2019/03/30/java8Stream/last2.jpg" alt="img"></p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p><strong>本文介绍了Java 8中的Stream 的用途，优点等。还接受了Stream的几种用法，分别是Stream创建、中间操作和最终操作。</strong></p><p><strong>Stream的创建有两种方式，分别是通过集合类的stream方法、通过Stream的of方法。</strong></p><p><strong>Stream的中间操作可以用来处理Stream，中间操作的输入和输出都是Stream，中间操作可以是过滤、转换、排序等。</strong></p><p><strong>Stream的最终操作可以将Stream转成其他形式，如计算出流中元素的个数、将流装换成集合、以及元素的遍历等。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Stream&quot;&gt;&lt;a href=&quot;#Stream&quot; class=&quot;headerlink&quot; title=&quot;Stream&quot;&gt;&lt;/a&gt;Stream&lt;/h1&gt;&lt;h2 id=&quot;Stream是什么？&quot;&gt;&lt;a href=&quot;#Stream是什么？&quot; class=&quot;headerlink&quot; title=&quot;Stream是什么？&quot;&gt;&lt;/a&gt;Stream是什么？&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Stream 使用一种类似用 SQL 语句从数据库查询数据的直观方式来提供一种对 Java 集合运算和表达的高阶抽象&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Stream API可以极大提高Java程序员的生产力，让程序员写出高效率、干净、简洁的代码。&lt;/p&gt;
&lt;p&gt;这种风格将要处理的元素集合看作一种流，流在管道中传输，并且可以在管道的节点上进行处理，比如筛选，排序，聚合等。&lt;/p&gt;
&lt;p&gt;Stream有以下特性及优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无存储。Stream不是一种数据结构，它只是某种数据源的一个视图，数据源可以是一个数组，Java容器或I/O channel等。&lt;/li&gt;
&lt;li&gt;为函数式编程而生。对Stream的任何修改都不会修改背后的数据源，比如对Stream执行过滤操作并不会删除被过滤的元素，而是会产生一个不包含被过滤元素的新Stream。&lt;/li&gt;
&lt;li&gt;惰式执行。Stream上的操作并不会立即执行，只有等到用户真正需要结果的时候才会执行。&lt;/li&gt;
&lt;li&gt;可消费性。Stream只能被“消费”一次，一旦遍历过就会失效，就像容器的迭代器那样，想要再次遍历必须重新生成。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们举一个例子，来看一下到底Stream可以做什么事情：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/03/30/java8Stream/java8stream.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;上面的例子中，获取一些带颜色塑料球作为数据源，首先过滤掉红色的、把它们融化成随机的三角形。再过滤器并删除小的三角形。最后计算出剩余图形的周长。&lt;/p&gt;
&lt;p&gt;如上图，对于流的处理，主要有三种关键性操作：分别是流的创建、中间操作（intermediate operation）以及最终操作(terminal operation)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java8" scheme="http://yoursite.com/tags/java8/"/>
    
  </entry>
  
</feed>
