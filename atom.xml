<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>夜阑卧听风吹雨的博客</title>
  
  <subtitle>心中有丘壑，眉目做山河</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-12T03:15:55.352Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zippo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL高性能优化规范建议</title>
    <link href="http://yoursite.com/2019/04/09/mysql%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2019/04/09/mysql规范/</id>
    <published>2019-04-09T07:17:42.000Z</published>
    <updated>2019-04-12T03:15:55.352Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库命令规范"><a href="#数据库命令规范" class="headerlink" title="数据库命令规范"></a>数据库命令规范</h2><p>•所有数据库对象名称必须使用小写字母并用下划线分割•所有数据库对象名称禁止使用 MySQL 保留关键字（如果表名中包含关键字查询时，需要将其用单引号括起来）•数据库对象的命名要能做到见名识意，并且最后不要超过 32 个字符•临时库表必须以 tmp_为前缀并以日期为后缀，备份表必须以 bak_为前缀并以日期 (时间戳) 为后缀•所有存储相同数据的列名和列类型必须一致（一般作为关联列，如果查询时关联列类型不一致会自动进行数据类型隐式转换，会造成列上的索引失效，导致查询效率降低）</p><hr><h2 id="数据库基本设计规范"><a href="#数据库基本设计规范" class="headerlink" title="数据库基本设计规范"></a>数据库基本设计规范</h2><h3 id="1-所有表必须使用-Innodb-存储引擎"><a href="#1-所有表必须使用-Innodb-存储引擎" class="headerlink" title="1. 所有表必须使用 Innodb 存储引擎"></a>1. 所有表必须使用 Innodb 存储引擎</h3><p>没有特殊要求（即 Innodb 无法满足的功能如：列存储，存储空间数据等）的情况下，所有表必须使用 Innodb 存储引擎（MySQL5.5 之前默认使用 Myisam，5.6 以后默认的为 Innodb）。</p><p>Innodb 支持事务，支持行级锁，更好的恢复性，高并发下性能更好。</p><h3 id="2-数据库和表的字符集统一使用-UTF8"><a href="#2-数据库和表的字符集统一使用-UTF8" class="headerlink" title="2. 数据库和表的字符集统一使用 UTF8"></a>2. 数据库和表的字符集统一使用 UTF8</h3><p>兼容性更好，统一字符集可以避免由于字符集转换产生的乱码，不同的字符集进行比较前需要进行转换会造成索引失效，如果数据库中有存储 emoji 表情的需要，字符集需要采用 utf8mb4 字符集。</p><h3 id="3-所有表和字段都需要添加注释"><a href="#3-所有表和字段都需要添加注释" class="headerlink" title="3. 所有表和字段都需要添加注释"></a>3. 所有表和字段都需要添加注释</h3><p>使用 comment 从句添加表和列的备注，从一开始就进行数据字典的维护</p><h3 id="4-尽量控制单表数据量的大小-建议控制在-500-万以内。"><a href="#4-尽量控制单表数据量的大小-建议控制在-500-万以内。" class="headerlink" title="4. 尽量控制单表数据量的大小,建议控制在 500 万以内。"></a>4. 尽量控制单表数据量的大小,建议控制在 500 万以内。</h3><p>500 万并不是 MySQL 数据库的限制，过大会造成修改表结构，备份，恢复都会有很大的问题。</p><p>可以用历史数据归档（应用于日志数据），分库分表（应用于业务数据）等手段来控制数据量大小</p><h3 id="5-谨慎使用-MySQL-分区表"><a href="#5-谨慎使用-MySQL-分区表" class="headerlink" title="5. 谨慎使用 MySQL 分区表"></a>5. 谨慎使用 MySQL 分区表</h3><p>分区表在物理上表现为多个文件，在逻辑上表现为一个表；</p><p>谨慎选择分区键，跨分区查询效率可能更低；</p><p>建议采用物理分表的方式管理大数据。</p><h3 id="6-尽量做到冷热数据分离-减小表的宽度"><a href="#6-尽量做到冷热数据分离-减小表的宽度" class="headerlink" title="6.尽量做到冷热数据分离,减小表的宽度"></a>6.尽量做到冷热数据分离,减小表的宽度</h3><blockquote><p>MySQL 限制每个表最多存储 4096 列，并且每一行数据的大小不能超过 65535 字节。</p></blockquote><p>减少磁盘 IO,保证热数据的内存缓存命中率（表越宽，把表装载进内存缓冲池时所占用的内存也就越大,也会消耗更多的 IO）；</p><p>更有效的利用缓存，避免读入无用的冷数据；</p><p>经常一起使用的列放到一个表中（避免更多的关联操作）。</p><h3 id="7-禁止在表中建立预留字段"><a href="#7-禁止在表中建立预留字段" class="headerlink" title="7. 禁止在表中建立预留字段"></a>7. 禁止在表中建立预留字段</h3><p>预留字段的命名很难做到见名识义。</p><p>预留字段无法确认存储的数据类型，所以无法选择合适的类型。</p><p>对预留字段类型的修改，会对表进行锁定。</p><h3 id="8-禁止在数据库中存储图片-文件等大的二进制数据"><a href="#8-禁止在数据库中存储图片-文件等大的二进制数据" class="headerlink" title="8. 禁止在数据库中存储图片,文件等大的二进制数据"></a>8. 禁止在数据库中存储图片,文件等大的二进制数据</h3><p>通常文件很大，会短时间内造成数据量快速增长，数据库进行数据库读取时，通常会进行大量的随机 IO 操作，文件很大时，IO 操作很耗时。</p><p>通常存储于文件服务器，数据库只存储文件地址信息</p><h3 id="9-禁止在线上做数据库压力测试"><a href="#9-禁止在线上做数据库压力测试" class="headerlink" title="9. 禁止在线上做数据库压力测试"></a>9. 禁止在线上做数据库压力测试</h3><h3 id="10-禁止从开发环境-测试环境直接连接生成环境数据库"><a href="#10-禁止从开发环境-测试环境直接连接生成环境数据库" class="headerlink" title="10. 禁止从开发环境,测试环境直接连接生成环境数据库"></a>10. 禁止从开发环境,测试环境直接连接生成环境数据库</h3><a id="more"></a><hr><h2 id="数据库字段设计规范"><a href="#数据库字段设计规范" class="headerlink" title="数据库字段设计规范"></a>数据库字段设计规范</h2><h3 id="1-优先选择符合存储需要的最小的数据类型"><a href="#1-优先选择符合存储需要的最小的数据类型" class="headerlink" title="1. 优先选择符合存储需要的最小的数据类型"></a>1. 优先选择符合存储需要的最小的数据类型</h3><p><strong>原因：</strong></p><p>列的字段越大，建立索引时所需要的空间也就越大，这样一页中所能存储的索引节点的数量也就越少也越少，在遍历时所需要的 IO 次数也就越多，索引的性能也就越差。</p><p><strong>方法：</strong></p><p><strong>a.将字符串转换成数字类型存储,如:将 IP 地址转换成整形数据</strong></p><p>MySQL 提供了两个方法来处理 ip 地址</p><p>•inet_aton 把 ip 转为无符号整型 (4-8 位)•inet_ntoa 把整型的 ip 转为地址</p><p>插入数据前，先用 inet_aton 把 ip 地址转为整型，可以节省空间，显示数据时，使用 inet_ntoa 把整型的 ip 地址转为地址显示即可。</p><p><strong>b.对于非负型的数据 (如自增 ID,整型 IP) 来说,要优先使用无符号整型来存储</strong></p><p><strong>原因：</strong></p><p>无符号相对于有符号可以多出一倍的存储空间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SIGNED INT -2147483648~2147483647UNSIGNED INT 0~4294967295</span><br></pre></td></tr></table></figure><p>VARCHAR(N) 中的 N 代表的是字符数，而不是字节数，使用 UTF8 存储 255 个汉字 Varchar(255)=765 个字节。<strong>过大的长度会消耗更多的内存。</strong></p><h3 id="2-避免使用-TEXT-BLOB-数据类型，最常见的-TEXT-类型可以存储-64k-的数据"><a href="#2-避免使用-TEXT-BLOB-数据类型，最常见的-TEXT-类型可以存储-64k-的数据" class="headerlink" title="2. 避免使用 TEXT,BLOB 数据类型，最常见的 TEXT 类型可以存储 64k 的数据"></a>2. 避免使用 TEXT,BLOB 数据类型，最常见的 TEXT 类型可以存储 64k 的数据</h3><p><strong>a. 建议把 BLOB 或是 TEXT 列分离到单独的扩展表中</strong></p><p>MySQL 内存临时表不支持 TEXT、BLOB 这样的大数据类型，如果查询中包含这样的数据，在排序等操作时，就不能使用内存临时表，必须使用磁盘临时表进行。而且对于这种数据，MySQL 还是要进行二次查询，会使 sql 性能变得很差，但是不是说一定不能使用这样的数据类型。</p><p>如果一定要使用，建议把 BLOB 或是 TEXT 列分离到单独的扩展表中，查询时一定不要使用 select * 而只需要取出必要的列，不需要 TEXT 列的数据时不要对该列进行查询。</p><p><strong>2、TEXT 或 BLOB 类型只能使用前缀索引</strong></p><p>因为MySQL[1] 对索引字段长度是有限制的，所以 TEXT 类型只能使用前缀索引，并且 TEXT 列上是不能有默认值的</p><h3 id="3-避免使用-ENUM-类型"><a href="#3-避免使用-ENUM-类型" class="headerlink" title="3. 避免使用 ENUM 类型"></a>3. 避免使用 ENUM 类型</h3><p>修改 ENUM 值需要使用 ALTER 语句</p><p>ENUM 类型的 ORDER BY 操作效率低，需要额外操作</p><p>禁止使用数值作为 ENUM 的枚举值</p><h3 id="4-尽可能把所有列定义为-NOT-NULL"><a href="#4-尽可能把所有列定义为-NOT-NULL" class="headerlink" title="4. 尽可能把所有列定义为 NOT NULL"></a>4. 尽可能把所有列定义为 NOT NULL</h3><p><strong>原因：</strong></p><p>索引 NULL 列需要额外的空间来保存，所以要占用更多的空间</p><p>进行比较和计算时要对 NULL 值做特别的处理</p><h3 id="5-使用-TIMESTAMP-4-个字节-或-DATETIME-类型-8-个字节-存储时间"><a href="#5-使用-TIMESTAMP-4-个字节-或-DATETIME-类型-8-个字节-存储时间" class="headerlink" title="5. 使用 TIMESTAMP(4 个字节) 或 DATETIME 类型 (8 个字节) 存储时间"></a>5. 使用 TIMESTAMP(4 个字节) 或 DATETIME 类型 (8 个字节) 存储时间</h3><p>TIMESTAMP 存储的时间范围 1970-01-01 00:00:01 ~ 2038-01-19-03:14:07</p><p>TIMESTAMP 占用 4 字节和 INT 相同，但比 INT 可读性高</p><p>超出 TIMESTAMP 取值范围的使用 DATETIME 类型存储</p><p><strong>经常会有人用字符串存储日期型的数据（不正确的做法）</strong></p><p>•缺点 1：无法用日期函数进行计算和比较•缺点 2：用字符串存储日期要占用更多的空间</p><h3 id="6-同财务相关的金额类数据必须使用-decimal-类型"><a href="#6-同财务相关的金额类数据必须使用-decimal-类型" class="headerlink" title="6. 同财务相关的金额类数据必须使用 decimal 类型"></a>6. 同财务相关的金额类数据必须使用 decimal 类型</h3><p>•非精准浮点：float,double•精准浮点：decimal</p><p>Decimal 类型为精准浮点数，在计算时不会丢失精度</p><p>占用空间由定义的宽度决定，每 4 个字节可以存储 9 位数字，并且小数点要占用一个字节</p><p>可用于存储比 bigint 更大的整型数据</p><hr><h2 id="索引设计规范"><a href="#索引设计规范" class="headerlink" title="索引设计规范"></a>索引设计规范</h2><h3 id="1-限制每张表上的索引数量-建议单张表索引不超过-5-个"><a href="#1-限制每张表上的索引数量-建议单张表索引不超过-5-个" class="headerlink" title="1. 限制每张表上的索引数量,建议单张表索引不超过 5 个"></a>1. 限制每张表上的索引数量,建议单张表索引不超过 5 个</h3><p>索引并不是越多越好！索引可以提高效率同样可以降低效率。</p><p>索引可以增加查询效率，但同样也会降低插入和更新的效率，甚至有些情况下会降低查询效率。</p><p>因为 MySQL 优化器在选择如何优化查询时，会根据统一信息，对每一个可以用到的索引来进行评估，以生成出一个最好的执行计划，如果同时有很多个索引都可以用于查询，就会增加 MySQL 优化器生成执行计划的时间，同样会降低查询性能。</p><h3 id="2-禁止给表中的每一列都建立单独的索引"><a href="#2-禁止给表中的每一列都建立单独的索引" class="headerlink" title="2. 禁止给表中的每一列都建立单独的索引"></a>2. 禁止给表中的每一列都建立单独的索引</h3><p>5.6 版本之前，一个 sql 只能使用到一个表中的一个索引，5.6 以后，虽然有了合并索引的优化方式，但是还是远远没有使用一个联合索引的查询方式好。</p><h3 id="3-每个-Innodb-表必须有个主键"><a href="#3-每个-Innodb-表必须有个主键" class="headerlink" title="3. 每个 Innodb 表必须有个主键"></a>3. 每个 Innodb 表必须有个主键</h3><p>Innodb 是一种索引组织表：数据的存储的逻辑顺序和索引的顺序是相同的。每个表都可以有多个索引，但是表的存储顺序只能有一种。</p><p>Innodb 是按照主键索引的顺序来组织表的</p><p>•不要使用更新频繁的列作为主键，不适用多列主键（相当于联合索引）•不要使用 UUID,MD5,HASH,字符串列作为主键（无法保证数据的顺序增长）•主键建议使用自增 ID 值</p><hr><h3 id="4-常见索引列建议"><a href="#4-常见索引列建议" class="headerlink" title="4. 常见索引列建议"></a>4. 常见索引列建议</h3><p>•出现在 SELECT、UPDATE、DELETE 语句的 WHERE 从句中的列•包含在 ORDER BY、GROUP BY、DISTINCT 中的字段•并不要将符合 1 和 2 中的字段的列都建立一个索引， 通常将 1、2 中的字段建立联合索引效果更好•多表 join 的关联列</p><hr><h3 id="5-如何选择索引列的顺序"><a href="#5-如何选择索引列的顺序" class="headerlink" title="5.如何选择索引列的顺序"></a>5.如何选择索引列的顺序</h3><p>建立索引的目的是：希望通过索引进行数据查找，减少随机 IO，增加查询性能 ，索引能过滤出越少的数据，则从磁盘中读入的数据也就越少。</p><p>•区分度最高的放在联合索引的最左侧（区分度=列中不同值的数量/列的总行数）•尽量把字段长度小的列放在联合索引的最左侧（因为字段长度越小，一页能存储的数据量越大，IO 性能也就越好）•使用最频繁的列放到联合索引的左侧（这样可以比较少的建立一些索引）</p><hr><h3 id="6-避免建立冗余索引和重复索引（增加了查询优化器生成执行计划的时间）"><a href="#6-避免建立冗余索引和重复索引（增加了查询优化器生成执行计划的时间）" class="headerlink" title="6. 避免建立冗余索引和重复索引（增加了查询优化器生成执行计划的时间）"></a>6. 避免建立冗余索引和重复索引（增加了查询优化器生成执行计划的时间）</h3><p>•重复索引示例：primary key(id)、index(id)、unique index(id)•冗余索引示例：index(a,b,c)、index(a,b)、index(a)</p><hr><h3 id="7-对于频繁的查询优先考虑使用覆盖索引"><a href="#7-对于频繁的查询优先考虑使用覆盖索引" class="headerlink" title="7. 对于频繁的查询优先考虑使用覆盖索引"></a>7. 对于频繁的查询优先考虑使用覆盖索引</h3><blockquote><p>覆盖索引：就是包含了所有查询字段 (where,select,ordery by,group by 包含的字段) 的索引</p></blockquote><p><strong>覆盖索引的好处：</strong></p><p>•<strong>避免 Innodb 表进行索引的二次查询:</strong> Innodb 是以聚集索引的顺序来存储的，对于 Innodb 来说，二级索引在叶子节点中所保存的是行的主键信息，如果是用二级索引查询数据的话，在查找到相应的键值后，还要通过主键进行二次查询才能获取我们真实所需要的数据。而在覆盖索引中，二级索引的键值中可以获取所有的数据，避免了对主键的二次查询 ，减少了 IO 操作，提升了查询效率。•<strong>可以把随机 IO 变成顺序 IO 加快查询效率:</strong> 由于覆盖索引是按键值的顺序存储的，对于 IO 密集型的范围查找来说，对比随机从磁盘读取每一行的数据 IO 要少的多，因此利用覆盖索引在访问时也可以把磁盘的随机读取的 IO 转变成索引查找的顺序 IO。</p><hr><h3 id="8-索引-SET-规范"><a href="#8-索引-SET-规范" class="headerlink" title="8.索引 SET 规范"></a>8.索引 SET 规范</h3><p><strong>尽量避免使用外键约束</strong></p><p>•不建议使用外键约束（foreign key），但一定要在表与表之间的关联键上建立索引•外键可用于保证数据的参照完整性，但建议在业务端实现•外键会影响父表和子表的写操作从而降低性能</p><hr><h2 id="数据库-SQL-开发规范"><a href="#数据库-SQL-开发规范" class="headerlink" title="数据库 SQL 开发规范"></a>数据库 SQL 开发规范</h2><h3 id="1-建议使用预编译语句进行数据库操作"><a href="#1-建议使用预编译语句进行数据库操作" class="headerlink" title="1. 建议使用预编译语句进行数据库操作"></a>1. 建议使用预编译语句进行数据库操作</h3><p>预编译语句可以重复使用这些计划，减少 SQL 编译所需要的时间，还可以解决动态 SQL 所带来的 SQL 注入的问题。</p><p>只传参数，比传递 SQL 语句更高效。</p><p>相同语句可以一次解析，多次使用，提高处理效率。</p><h3 id="2-避免数据类型的隐式转换"><a href="#2-避免数据类型的隐式转换" class="headerlink" title="2. 避免数据类型的隐式转换"></a>2. 避免数据类型的隐式转换</h3><p>隐式转换会导致索引失效如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name,phone from customer where id = &apos;111&apos;;</span><br></pre></td></tr></table></figure><h3 id="3-充分利用表上已经存在的索引"><a href="#3-充分利用表上已经存在的索引" class="headerlink" title="3. 充分利用表上已经存在的索引"></a>3. 充分利用表上已经存在的索引</h3><p>避免使用双%号的查询条件。如：<code>a like &#39;%123%&#39;</code>，（如果无前置%,只有后置%，是可以用到列上的索引的）</p><p>一个 SQL 只能利用到复合索引中的一列进行范围查询。如：有 a,b,c 列的联合索引，在查询条件中有 a 列的范围查询，则在 b,c 列上的索引将不会被用到。</p><p>在定义联合索引时，如果 a 列要用到范围查找的话，就要把 a 列放到联合索引的右侧，使用 left join 或 not exists 来优化 not in 操作，因为 not in 也通常会使用索引失效。</p><h3 id="4-数据库设计时，应该要对以后扩展进行考虑"><a href="#4-数据库设计时，应该要对以后扩展进行考虑" class="headerlink" title="4. 数据库设计时，应该要对以后扩展进行考虑"></a>4. 数据库设计时，应该要对以后扩展进行考虑</h3><h3 id="5-程序连接不同的数据库使用不同的账号，进制跨库查询"><a href="#5-程序连接不同的数据库使用不同的账号，进制跨库查询" class="headerlink" title="5. 程序连接不同的数据库使用不同的账号，进制跨库查询"></a>5. 程序连接不同的数据库使用不同的账号，进制跨库查询</h3><p>•为数据库迁移和分库分表留出余地•降低业务耦合度•避免权限过大而产生的安全风险</p><h3 id="6-禁止使用-SELECT-必须使用-SELECT-lt-字段列表-gt-查询"><a href="#6-禁止使用-SELECT-必须使用-SELECT-lt-字段列表-gt-查询" class="headerlink" title="6. 禁止使用 SELECT * 必须使用 SELECT &lt;字段列表&gt; 查询"></a>6. 禁止使用 SELECT * 必须使用 SELECT &lt;字段列表&gt; 查询</h3><p><strong>原因：</strong></p><p>•消耗更多的 CPU 和 IO 以网络带宽资源•无法使用覆盖索引•可减少表结构变更带来的影响</p><h3 id="7-禁止使用不含字段列表的-INSERT-语句"><a href="#7-禁止使用不含字段列表的-INSERT-语句" class="headerlink" title="7. 禁止使用不含字段列表的 INSERT 语句"></a>7. 禁止使用不含字段列表的 INSERT 语句</h3><p>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into values (&apos;a&apos;,&apos;b&apos;,&apos;c&apos;);</span><br></pre></td></tr></table></figure><p>应使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into t(c1,c2,c3) values (&apos;a&apos;,&apos;b&apos;,&apos;c&apos;);</span><br></pre></td></tr></table></figure><h3 id="8-避免使用子查询，可以把子查询优化为-join-操作"><a href="#8-避免使用子查询，可以把子查询优化为-join-操作" class="headerlink" title="8. 避免使用子查询，可以把子查询优化为 join 操作"></a>8. 避免使用子查询，可以把子查询优化为 join 操作</h3><p>通常子查询在 in 子句中，且子查询中为简单 SQL(不包含 union、group by、order by、limit 从句) 时,才可以把子查询转化为关联查询进行优化。</p><p><strong>子查询性能差的原因：</strong></p><p>子查询的结果集无法使用索引，通常子查询的结果集会被存储到临时表中，不论是内存临时表还是磁盘临时表都不会存在索引，所以查询性能会受到一定的影响。特别是对于返回结果集比较大的子查询，其对查询性能的影响也就越大。</p><p>由于子查询会产生大量的临时表也没有索引，所以会消耗过多的 CPU 和 IO 资源，产生大量的慢查询。</p><h3 id="9-避免使用-JOIN-关联太多的表"><a href="#9-避免使用-JOIN-关联太多的表" class="headerlink" title="9. 避免使用 JOIN 关联太多的表"></a>9. 避免使用 JOIN 关联太多的表</h3><p>对于 MySQL 来说，是存在关联缓存的，缓存的大小可以由 join_buffer_size 参数进行设置。</p><p>在 MySQL 中，对于同一个 SQL 多关联（join）一个表，就会多分配一个关联缓存，如果在一个 SQL 中关联的表越多，所占用的内存也就越大。</p><p>如果程序中大量的使用了多表关联的操作，同时 join_buffer_size 设置的也不合理的情况下，就容易造成服务器内存溢出的情况，就会影响到服务器数据库性能的稳定性。</p><p>同时对于关联操作来说，会产生临时表操作，影响查询效率，MySQL 最多允许关联 61 个表，建议不超过 5 个。</p><h3 id="10-减少同数据库的交互次数"><a href="#10-减少同数据库的交互次数" class="headerlink" title="10. 减少同数据库的交互次数"></a>10. 减少同数据库的交互次数</h3><p>数据库更适合处理批量操作，合并多个相同的操作到一起，可以提高处理效率。</p><h3 id="11-对应同一列进行-or-判断时，使用-in-代替-or"><a href="#11-对应同一列进行-or-判断时，使用-in-代替-or" class="headerlink" title="11. 对应同一列进行 or 判断时，使用 in 代替 or"></a>11. 对应同一列进行 or 判断时，使用 in 代替 or</h3><p>in 的值不要超过 500 个，in 操作可以更有效的利用索引，or 大多数情况下很少能利用到索引。</p><h3 id="12-禁止使用-order-by-rand-进行随机排序"><a href="#12-禁止使用-order-by-rand-进行随机排序" class="headerlink" title="12. 禁止使用 order by rand() 进行随机排序"></a>12. 禁止使用 order by rand() 进行随机排序</h3><p>order by rand() 会把表中所有符合条件的数据装载到内存中，然后在内存中对所有数据根据随机生成的值进行排序，并且可能会对每一行都生成一个随机值，如果满足条件的数据集非常大，就会消耗大量的 CPU 和 IO 及内存资源。</p><p>推荐在程序中获取一个随机值，然后从数据库中获取数据的方式。</p><h3 id="13-WHERE-从句中禁止对列进行函数转换和计算"><a href="#13-WHERE-从句中禁止对列进行函数转换和计算" class="headerlink" title="13. WHERE 从句中禁止对列进行函数转换和计算"></a>13. WHERE 从句中禁止对列进行函数转换和计算</h3><p>对列进行函数转换或计算时会导致无法使用索引</p><p><strong>不推荐：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">where date(create_time)=&apos;20190101&apos;</span><br></pre></td></tr></table></figure><p><strong>推荐：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">where create_time &gt;= &apos;20190101&apos; and create_time &lt; &apos;20190102&apos;</span><br></pre></td></tr></table></figure><h3 id="14-在明显不会有重复值时使用-UNION-ALL-而不是-UNION"><a href="#14-在明显不会有重复值时使用-UNION-ALL-而不是-UNION" class="headerlink" title="14. 在明显不会有重复值时使用 UNION ALL 而不是 UNION"></a>14. 在明显不会有重复值时使用 UNION ALL 而不是 UNION</h3><p>•UNION 会把两个结果集的所有数据放到临时表中后再进行去重操作•UNION ALL 不会再对结果集进行去重操作</p><h3 id="15-拆分复杂的大-SQL-为多个小-SQL"><a href="#15-拆分复杂的大-SQL-为多个小-SQL" class="headerlink" title="15. 拆分复杂的大 SQL 为多个小 SQL"></a>15. 拆分复杂的大 SQL 为多个小 SQL</h3><p>•大 SQL 逻辑上比较复杂，需要占用大量 CPU 进行计算的 SQL•MySQL 中，一个 SQL 只能使用一个 CPU 进行计算•SQL 拆分后可以通过并行执行来提高处理效率</p><hr><h2 id="数据库操作行为规范"><a href="#数据库操作行为规范" class="headerlink" title="数据库操作行为规范"></a>数据库操作行为规范</h2><h3 id="1-超-100-万行的批量写-UPDATE-DELETE-INSERT-操作-要分批多次进行操作"><a href="#1-超-100-万行的批量写-UPDATE-DELETE-INSERT-操作-要分批多次进行操作" class="headerlink" title="1. 超 100 万行的批量写 (UPDATE,DELETE,INSERT) 操作,要分批多次进行操作"></a>1. 超 100 万行的批量写 (UPDATE,DELETE,INSERT) 操作,要分批多次进行操作</h3><p><strong>大批量操作可能会造成严重的主从延迟</strong></p><p>主从环境中,大批量操作可能会造成严重的主从延迟，大批量的写操作一般都需要执行一定长的时间， 而只有当主库上执行完成后，才会在其他从库上执行，所以会造成主库与从库长时间的延迟情况</p><p><strong>binlog 日志为 row 格式时会产生大量的日志</strong></p><p>大批量写操作会产生大量日志，特别是对于 row 格式二进制数据而言，由于在 row 格式中会记录每一行数据的修改，我们一次修改的数据越多，产生的日志量也就会越多，日志的传输和恢复所需要的时间也就越长，这也是造成主从延迟的一个原因</p><p><strong>避免产生大事务操作</strong></p><p>大批量修改数据，一定是在一个事务中进行的，这就会造成表中大批量数据进行锁定，从而导致大量的阻塞，阻塞会对 MySQL 的性能产生非常大的影响。</p><p>特别是长时间的阻塞会占满所有数据库的可用连接，这会使生产环境中的其他应用无法连接到数据库，因此一定要注意大批量写操作要进行分批</p><h3 id="2-对于大表使用-pt-online-schema-change-修改表结构"><a href="#2-对于大表使用-pt-online-schema-change-修改表结构" class="headerlink" title="2. 对于大表使用 pt-online-schema-change 修改表结构"></a>2. 对于大表使用 pt-online-schema-change 修改表结构</h3><p>•避免大表修改产生的主从延迟•避免在对表字段进行修改时进行锁表</p><p>对大表数据结构的修改一定要谨慎，会造成严重的锁表操作，尤其是生产环境，是不能容忍的。</p><p>pt-online-schema-change 它会首先建立一个与原表结构相同的新表，并且在新表上进行表结构的修改，然后再把原表中的数据复制到新表中，并在原表中增加一些触发器。把原表中新增的数据也复制到新表中，在行所有数据复制完成之后，把新表命名成原表，并把原来的表删除掉。把原来一个 DDL 操作，分解成多个小的批次进行。</p><h3 id="3-禁止为程序使用的账号赋予-super-权限"><a href="#3-禁止为程序使用的账号赋予-super-权限" class="headerlink" title="3. 禁止为程序使用的账号赋予 super 权限"></a>3. 禁止为程序使用的账号赋予 super 权限</h3><p>•当达到最大连接数限制时，还运行 1 个有 super 权限的用户连接•super 权限只能留给 DBA 处理问题的账号使用</p><h3 id="4-对于程序连接数据库账号-遵循权限最小原则"><a href="#4-对于程序连接数据库账号-遵循权限最小原则" class="headerlink" title="4. 对于程序连接数据库账号,遵循权限最小原则"></a>4. 对于程序连接数据库账号,遵循权限最小原则</h3><p>•程序使用数据库账号只能在一个 DB 下使用，不准跨库•程序使用的账号原则上不准有 drop 权限</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数据库命令规范&quot;&gt;&lt;a href=&quot;#数据库命令规范&quot; class=&quot;headerlink&quot; title=&quot;数据库命令规范&quot;&gt;&lt;/a&gt;数据库命令规范&lt;/h2&gt;&lt;p&gt;•所有数据库对象名称必须使用小写字母并用下划线分割•所有数据库对象名称禁止使用 MySQL 保留关键字（如果表名中包含关键字查询时，需要将其用单引号括起来）•数据库对象的命名要能做到见名识意，并且最后不要超过 32 个字符•临时库表必须以 tmp_为前缀并以日期为后缀，备份表必须以 bak_为前缀并以日期 (时间戳) 为后缀•所有存储相同数据的列名和列类型必须一致（一般作为关联列，如果查询时关联列类型不一致会自动进行数据类型隐式转换，会造成列上的索引失效，导致查询效率降低）&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;数据库基本设计规范&quot;&gt;&lt;a href=&quot;#数据库基本设计规范&quot; class=&quot;headerlink&quot; title=&quot;数据库基本设计规范&quot;&gt;&lt;/a&gt;数据库基本设计规范&lt;/h2&gt;&lt;h3 id=&quot;1-所有表必须使用-Innodb-存储引擎&quot;&gt;&lt;a href=&quot;#1-所有表必须使用-Innodb-存储引擎&quot; class=&quot;headerlink&quot; title=&quot;1. 所有表必须使用 Innodb 存储引擎&quot;&gt;&lt;/a&gt;1. 所有表必须使用 Innodb 存储引擎&lt;/h3&gt;&lt;p&gt;没有特殊要求（即 Innodb 无法满足的功能如：列存储，存储空间数据等）的情况下，所有表必须使用 Innodb 存储引擎（MySQL5.5 之前默认使用 Myisam，5.6 以后默认的为 Innodb）。&lt;/p&gt;
&lt;p&gt;Innodb 支持事务，支持行级锁，更好的恢复性，高并发下性能更好。&lt;/p&gt;
&lt;h3 id=&quot;2-数据库和表的字符集统一使用-UTF8&quot;&gt;&lt;a href=&quot;#2-数据库和表的字符集统一使用-UTF8&quot; class=&quot;headerlink&quot; title=&quot;2. 数据库和表的字符集统一使用 UTF8&quot;&gt;&lt;/a&gt;2. 数据库和表的字符集统一使用 UTF8&lt;/h3&gt;&lt;p&gt;兼容性更好，统一字符集可以避免由于字符集转换产生的乱码，不同的字符集进行比较前需要进行转换会造成索引失效，如果数据库中有存储 emoji 表情的需要，字符集需要采用 utf8mb4 字符集。&lt;/p&gt;
&lt;h3 id=&quot;3-所有表和字段都需要添加注释&quot;&gt;&lt;a href=&quot;#3-所有表和字段都需要添加注释&quot; class=&quot;headerlink&quot; title=&quot;3. 所有表和字段都需要添加注释&quot;&gt;&lt;/a&gt;3. 所有表和字段都需要添加注释&lt;/h3&gt;&lt;p&gt;使用 comment 从句添加表和列的备注，从一开始就进行数据字典的维护&lt;/p&gt;
&lt;h3 id=&quot;4-尽量控制单表数据量的大小-建议控制在-500-万以内。&quot;&gt;&lt;a href=&quot;#4-尽量控制单表数据量的大小-建议控制在-500-万以内。&quot; class=&quot;headerlink&quot; title=&quot;4. 尽量控制单表数据量的大小,建议控制在 500 万以内。&quot;&gt;&lt;/a&gt;4. 尽量控制单表数据量的大小,建议控制在 500 万以内。&lt;/h3&gt;&lt;p&gt;500 万并不是 MySQL 数据库的限制，过大会造成修改表结构，备份，恢复都会有很大的问题。&lt;/p&gt;
&lt;p&gt;可以用历史数据归档（应用于日志数据），分库分表（应用于业务数据）等手段来控制数据量大小&lt;/p&gt;
&lt;h3 id=&quot;5-谨慎使用-MySQL-分区表&quot;&gt;&lt;a href=&quot;#5-谨慎使用-MySQL-分区表&quot; class=&quot;headerlink&quot; title=&quot;5. 谨慎使用 MySQL 分区表&quot;&gt;&lt;/a&gt;5. 谨慎使用 MySQL 分区表&lt;/h3&gt;&lt;p&gt;分区表在物理上表现为多个文件，在逻辑上表现为一个表；&lt;/p&gt;
&lt;p&gt;谨慎选择分区键，跨分区查询效率可能更低；&lt;/p&gt;
&lt;p&gt;建议采用物理分表的方式管理大数据。&lt;/p&gt;
&lt;h3 id=&quot;6-尽量做到冷热数据分离-减小表的宽度&quot;&gt;&lt;a href=&quot;#6-尽量做到冷热数据分离-减小表的宽度&quot; class=&quot;headerlink&quot; title=&quot;6.尽量做到冷热数据分离,减小表的宽度&quot;&gt;&lt;/a&gt;6.尽量做到冷热数据分离,减小表的宽度&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;MySQL 限制每个表最多存储 4096 列，并且每一行数据的大小不能超过 65535 字节。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;减少磁盘 IO,保证热数据的内存缓存命中率（表越宽，把表装载进内存缓冲池时所占用的内存也就越大,也会消耗更多的 IO）；&lt;/p&gt;
&lt;p&gt;更有效的利用缓存，避免读入无用的冷数据；&lt;/p&gt;
&lt;p&gt;经常一起使用的列放到一个表中（避免更多的关联操作）。&lt;/p&gt;
&lt;h3 id=&quot;7-禁止在表中建立预留字段&quot;&gt;&lt;a href=&quot;#7-禁止在表中建立预留字段&quot; class=&quot;headerlink&quot; title=&quot;7. 禁止在表中建立预留字段&quot;&gt;&lt;/a&gt;7. 禁止在表中建立预留字段&lt;/h3&gt;&lt;p&gt;预留字段的命名很难做到见名识义。&lt;/p&gt;
&lt;p&gt;预留字段无法确认存储的数据类型，所以无法选择合适的类型。&lt;/p&gt;
&lt;p&gt;对预留字段类型的修改，会对表进行锁定。&lt;/p&gt;
&lt;h3 id=&quot;8-禁止在数据库中存储图片-文件等大的二进制数据&quot;&gt;&lt;a href=&quot;#8-禁止在数据库中存储图片-文件等大的二进制数据&quot; class=&quot;headerlink&quot; title=&quot;8. 禁止在数据库中存储图片,文件等大的二进制数据&quot;&gt;&lt;/a&gt;8. 禁止在数据库中存储图片,文件等大的二进制数据&lt;/h3&gt;&lt;p&gt;通常文件很大，会短时间内造成数据量快速增长，数据库进行数据库读取时，通常会进行大量的随机 IO 操作，文件很大时，IO 操作很耗时。&lt;/p&gt;
&lt;p&gt;通常存储于文件服务器，数据库只存储文件地址信息&lt;/p&gt;
&lt;h3 id=&quot;9-禁止在线上做数据库压力测试&quot;&gt;&lt;a href=&quot;#9-禁止在线上做数据库压力测试&quot; class=&quot;headerlink&quot; title=&quot;9. 禁止在线上做数据库压力测试&quot;&gt;&lt;/a&gt;9. 禁止在线上做数据库压力测试&lt;/h3&gt;&lt;h3 id=&quot;10-禁止从开发环境-测试环境直接连接生成环境数据库&quot;&gt;&lt;a href=&quot;#10-禁止从开发环境-测试环境直接连接生成环境数据库&quot; class=&quot;headerlink&quot; title=&quot;10. 禁止从开发环境,测试环境直接连接生成环境数据库&quot;&gt;&lt;/a&gt;10. 禁止从开发环境,测试环境直接连接生成环境数据库&lt;/h3&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>事物隔离级别</title>
    <link href="http://yoursite.com/2019/04/03/%E4%BA%8B%E7%89%A9%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
    <id>http://yoursite.com/2019/04/03/事物隔离级别/</id>
    <published>2019-04-03T07:17:42.000Z</published>
    <updated>2019-04-03T04:40:15.855Z</updated>
    
    <content type="html"><![CDATA[<p># </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;# &lt;/p&gt;

      
    
    </summary>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>java8工具类</title>
    <link href="http://yoursite.com/2019/04/03/java8%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <id>http://yoursite.com/2019/04/03/java8工具类/</id>
    <published>2019-04-03T07:17:42.000Z</published>
    <updated>2019-04-12T03:18:12.900Z</updated>
    
    <content type="html"><![CDATA[<p>前几天写过一篇，java8 date 的文章，今天项目弄完了。学以致用，这里自己封装了一个工具类</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br></pre></td><td class="code"><pre><span class="line">public class DateUtil &#123;</span><br><span class="line">    public static final String STANDARD_TIME_FORMAT = &quot;yyyy:MM:dd HH:mm:ss&quot;;</span><br><span class="line">    public static final String STANDARD_DATE_FORMAT = &quot;yyyy:MM:dd&quot;;</span><br><span class="line">    public static final String STANDARD_DATE_FORMAT2 = &quot;yyyy-MM-dd&quot;;</span><br><span class="line">    /**</span><br><span class="line">     * 标准日期格式</span><br><span class="line">     */</span><br><span class="line">    public static final String STANDARD_TIME_FORMAT2 = &quot;yyyy-MM-dd HH:mm:ss&quot;;</span><br><span class="line"></span><br><span class="line">    public static final String STANDARD_TIME_FORMAT3 = &quot;yyyy-MM-dd HH:mm&quot;;</span><br><span class="line"></span><br><span class="line">    public static final String STANDARD_TIME_FORMAT4 = &quot;yyyyMMdd&quot;;</span><br><span class="line">    </span><br><span class="line">    public static final String STANDARD_TIME_FORMAT5 = &quot;yyyyMMddHHmmssSSS&quot;;</span><br><span class="line">    /**</span><br><span class="line">     * 标准日期月格式</span><br><span class="line">     */</span><br><span class="line">    public static final String STANDARD_MONTH_FORMAT = &quot;yyyy-MM&quot;;</span><br><span class="line">    </span><br><span class="line">    public static final String ISO_TIME_FORMAT = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&apos;Z&apos;&quot;;</span><br><span class="line"></span><br><span class="line">    private static String[] weekDays = &#123;&quot;星期日&quot;, &quot;星期一&quot;, &quot;星期二&quot;, &quot;星期三&quot;, &quot;星期四&quot;, &quot;星期五&quot;, &quot;星期六&quot;&#125;;</span><br><span class="line">    </span><br><span class="line">    private static int sequence = 0;</span><br><span class="line">   </span><br><span class="line">    private static int length = 6;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 得到星期几</span><br><span class="line">     *</span><br><span class="line">     * @param date</span><br><span class="line">     * @return</span><br><span class="line">     * @date 2018年8月25日</span><br><span class="line">     * @author zp</span><br><span class="line">     */</span><br><span class="line">    public static String getWeekByDate(Date date) &#123;</span><br><span class="line">        int w = getWeekInt(date) - 1;</span><br><span class="line">        if (w &lt; 0) &#123;</span><br><span class="line">         w = 0;</span><br><span class="line">      &#125;</span><br><span class="line">        return weekDays[w];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 返回星期几的int</span><br><span class="line">     *</span><br><span class="line">     * @param date</span><br><span class="line">     * @return</span><br><span class="line">     * @date 2018年8月25日</span><br><span class="line">     * @author zp</span><br><span class="line">     */</span><br><span class="line">    public static int getWeekInt(Date date) &#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        cal.setTime(date);</span><br><span class="line">        int w = cal.get(Calendar.DAY_OF_WEEK);</span><br><span class="line">        return w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 得到今天是几号</span><br><span class="line">     *</span><br><span class="line">     * @param date</span><br><span class="line">     * @return</span><br><span class="line">     * @date 2018年8月25日</span><br><span class="line">     * @author zp</span><br><span class="line">     */</span><br><span class="line">    public static int getDayNum(Date date) &#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        cal.setTime(date);</span><br><span class="line">        return cal.get(Calendar.DATE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据传入日期、得到当天日期当天的起始时间</span><br><span class="line">     * </span><br><span class="line">     * @param date</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static Date getToday(Date date) &#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        cal.setTime(date);</span><br><span class="line">        cal.set(Calendar.HOUR_OF_DAY, 0);</span><br><span class="line">        cal.set(Calendar.MINUTE, 0);</span><br><span class="line">        cal.set(Calendar.SECOND, 0);</span><br><span class="line">        cal.set(Calendar.MILLISECOND, 0);</span><br><span class="line">        return cal.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据传入日期、得到前一天的起始时间</span><br><span class="line">     * </span><br><span class="line">     * @param date</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static Date getYesterday(Date date) &#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        cal.setTime(date);</span><br><span class="line">        cal.add(Calendar.DAY_OF_MONTH, -1);</span><br><span class="line">        return cal.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据传入日期、得到当前日期所在星期的开始时间</span><br><span class="line">     * </span><br><span class="line">     * @param date</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static Date getThisWeekDay(Date date) &#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        cal.setTime(date);</span><br><span class="line">        // 从周一开始算</span><br><span class="line">        int dayWeek = cal.get(Calendar.DAY_OF_WEEK);</span><br><span class="line">        if (dayWeek == 1) &#123;</span><br><span class="line">            cal.add(Calendar.DATE, -1);</span><br><span class="line">        &#125;</span><br><span class="line">        cal.set(Calendar.DAY_OF_WEEK, 2);</span><br><span class="line">        cal.set(Calendar.HOUR_OF_DAY, 0);</span><br><span class="line">        cal.set(Calendar.MINUTE, 0);</span><br><span class="line">        cal.set(Calendar.SECOND, 0);</span><br><span class="line">        cal.set(Calendar.MILLISECOND, 1);</span><br><span class="line">        return cal.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取当周结束时间</span><br><span class="line">     *</span><br><span class="line">     * @param date</span><br><span class="line">     * @return</span><br><span class="line">     * @date 2018年8月25日</span><br><span class="line">     * @author zp</span><br><span class="line">     */</span><br><span class="line">    public static Date getThisWeekEnd(Date date) &#123;</span><br><span class="line">        Calendar currentDate = Calendar.getInstance();</span><br><span class="line">        currentDate.setTime(date);</span><br><span class="line">        currentDate.setFirstDayOfWeek(Calendar.MONDAY);</span><br><span class="line">        currentDate.set(Calendar.HOUR_OF_DAY, 23);</span><br><span class="line">        currentDate.set(Calendar.MINUTE, 59);</span><br><span class="line">        currentDate.set(Calendar.SECOND, 59);</span><br><span class="line">        currentDate.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);</span><br><span class="line">        return currentDate.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据传入日期、得到当前日期所在月份的开始时间</span><br><span class="line">     * </span><br><span class="line">     * @param date</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static Date getThisMonthDay(Date date) &#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        cal.setTime(date);</span><br><span class="line">        cal.set(Calendar.DAY_OF_MONTH, 1);</span><br><span class="line">        cal.set(Calendar.HOUR_OF_DAY, 0);</span><br><span class="line">        cal.set(Calendar.MINUTE, 0);</span><br><span class="line">        cal.set(Calendar.SECOND, 0);</span><br><span class="line">        cal.set(Calendar.MILLISECOND, 2);</span><br><span class="line">        return cal.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取当月最后一天</span><br><span class="line">     *</span><br><span class="line">     * @param date</span><br><span class="line">     * @return</span><br><span class="line">     * @date 2018年8月25日</span><br><span class="line">     * @author zp</span><br><span class="line">     */</span><br><span class="line">    public static Date getThisMonthLastDate(Date date) &#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        cal.setTime(date);</span><br><span class="line">        cal.set(Calendar.DAY_OF_MONTH, 1);// 设置为1号,当前日期既为本月第一天</span><br><span class="line">        cal.add(Calendar.MONTH, 1);// 月增加1天</span><br><span class="line">        cal.add(Calendar.DAY_OF_MONTH, -1);// 日期倒数一日,既得到本月最后一天</span><br><span class="line">        cal.set(Calendar.HOUR_OF_DAY, 23);</span><br><span class="line">        cal.set(Calendar.MINUTE, 59);</span><br><span class="line">        cal.set(Calendar.SECOND, 59);</span><br><span class="line">        return cal.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据传入日期、得到当前日期所在季度的开始时间</span><br><span class="line">     * </span><br><span class="line">     * @param date</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static Date getThisSeasonDay(Date date) &#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        cal.setTime(date);</span><br><span class="line">        int month = cal.get(Calendar.MONTH);</span><br><span class="line">        int season = (month + 1 + 4) / 4;</span><br><span class="line">        switch (season) &#123;</span><br><span class="line">            case 1:</span><br><span class="line">                cal.set(Calendar.MONTH, Calendar.JANUARY);</span><br><span class="line">                break;</span><br><span class="line">            case 2:</span><br><span class="line">                cal.set(Calendar.MONTH, Calendar.APRIL);</span><br><span class="line">                break;</span><br><span class="line">            case 3:</span><br><span class="line">                cal.set(Calendar.MONTH, Calendar.JULY);</span><br><span class="line">                break;</span><br><span class="line">            case 4:</span><br><span class="line">                cal.set(Calendar.MONTH, Calendar.OCTOBER);</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">               break;</span><br><span class="line">        &#125;</span><br><span class="line">        cal.set(Calendar.DAY_OF_MONTH, 1);</span><br><span class="line">        cal.set(Calendar.HOUR_OF_DAY, 0);</span><br><span class="line">        cal.set(Calendar.MINUTE, 0);</span><br><span class="line">        cal.set(Calendar.SECOND, 0);</span><br><span class="line">        cal.set(Calendar.MILLISECOND, 3);</span><br><span class="line">        return cal.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据传入日期、得到当前日期所在年份的开始时间</span><br><span class="line">     * </span><br><span class="line">     * @param date</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static Date getThisYearDay(Date date) &#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        cal.setTime(date);</span><br><span class="line">        cal.set(Calendar.DAY_OF_YEAR, 1);</span><br><span class="line">        cal.set(Calendar.HOUR_OF_DAY, 0);</span><br><span class="line">        cal.set(Calendar.MINUTE, 0);</span><br><span class="line">        cal.set(Calendar.SECOND, 0);</span><br><span class="line">        cal.set(Calendar.MILLISECOND, 4);</span><br><span class="line">        return cal.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据传入日期，得到当前日期7天前的日期</span><br><span class="line">     * </span><br><span class="line">     * @param date</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static Date getLastSevenDays(Date date) &#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        cal.setTime(date);</span><br><span class="line">        cal.add(Calendar.DAY_OF_YEAR, -7);</span><br><span class="line">        cal.set(Calendar.HOUR_OF_DAY, 0);</span><br><span class="line">        cal.set(Calendar.MINUTE, 0);</span><br><span class="line">        cal.set(Calendar.SECOND, 0);</span><br><span class="line">        cal.set(Calendar.MILLISECOND, 0);</span><br><span class="line">        return cal.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据传入日期，得到当前日期n天后的日期</span><br><span class="line">     * </span><br><span class="line">     * @param date</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static Date getLastDays(Date date, int n) &#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        cal.setTime(date);</span><br><span class="line">        cal.add(Calendar.DAY_OF_YEAR, n);</span><br><span class="line">        cal.set(Calendar.HOUR_OF_DAY, 0);</span><br><span class="line">        cal.set(Calendar.MINUTE, 0);</span><br><span class="line">        cal.set(Calendar.SECOND, 0);</span><br><span class="line">        cal.set(Calendar.MILLISECOND, 0);</span><br><span class="line">        return cal.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取日期是当年的第几周</span><br><span class="line">     *</span><br><span class="line">     * @param date</span><br><span class="line">     * @return</span><br><span class="line">     * @date 2018年8月25日</span><br><span class="line">     * @author zp</span><br><span class="line">     */</span><br><span class="line">    public static int getWeekOfDate(Date date) &#123;</span><br><span class="line">        Calendar ca = Calendar.getInstance();// 创建一个日期实例</span><br><span class="line">        ca.setTime(date);// 实例化一个日期</span><br><span class="line">        return ca.get(Calendar.WEEK_OF_YEAR);// 获取是第几周</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static String getDateStr(Date date, String pattern) &#123;</span><br><span class="line">        SimpleDateFormat format = new SimpleDateFormat(pattern);</span><br><span class="line">        return format.format(date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 格式化为标准日期格式(yyyy-MM-dd HH:mm:ss)的日期</span><br><span class="line">     * </span><br><span class="line">     * @param strDate 字符串日期</span><br><span class="line">     * @return 标准日期</span><br><span class="line">     */</span><br><span class="line">    public static Date getStandardStringDate(String strDate) &#123;</span><br><span class="line">        return getStringDate(strDate, STANDARD_TIME_FORMAT2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 格式化为自定义的日期格式</span><br><span class="line">     * </span><br><span class="line">     * @param strDate 字符串日期</span><br><span class="line">     * @param strType 自定义的日期格式</span><br><span class="line">     * @return 自定义的日期</span><br><span class="line">     */</span><br><span class="line">    public static Date getStringDate(String strDate, String strType) &#123;</span><br><span class="line">        Date date = null;</span><br><span class="line"></span><br><span class="line">        SimpleDateFormat objSDF = new SimpleDateFormat(strType);</span><br><span class="line">        try &#123;</span><br><span class="line">            date = objSDF.parse(strDate);</span><br><span class="line">        &#125; catch (Exception e) &#123;&#125;</span><br><span class="line"></span><br><span class="line">        return date;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取当前格式化时间</span><br><span class="line">     * </span><br><span class="line">     * @return</span><br><span class="line">     * @date 2018年8月25日</span><br><span class="line">     * @author zp</span><br><span class="line">     */</span><br><span class="line">    public static String currTime() &#123;</span><br><span class="line">        SimpleDateFormat format = new SimpleDateFormat(STANDARD_TIME_FORMAT2);</span><br><span class="line">        return format.format(new Date());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Date min(Date end, Date now) &#123;</span><br><span class="line">        int compare = end.compareTo(now);</span><br><span class="line">        return compare &gt; 0 ? now : end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取日期当天的最后一秒的时间值</span><br><span class="line">     *</span><br><span class="line">     * 这里没设置到毫秒级别 ，原因是如果设置了毫秒数 比如： 2025-01-01 23:59:59.999 插入数据库后会自动变更为 2025-01-02 00:00:00.000</span><br><span class="line">     * ，如果在不考虑毫秒的情况下，将会出现1秒钟的误差，所以这里不设置毫秒数</span><br><span class="line">     * </span><br><span class="line">     * @param date</span><br><span class="line">     * @return</span><br><span class="line">     * @date 2018年8月25日</span><br><span class="line">     * @author zp</span><br><span class="line">     */</span><br><span class="line">    public static Date getLastSencond(Date date) &#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        cal.setTime(date);</span><br><span class="line">        cal.set(Calendar.HOUR_OF_DAY, 23);</span><br><span class="line">        cal.set(Calendar.MINUTE, 59);</span><br><span class="line">        cal.set(Calendar.SECOND, 59);</span><br><span class="line"></span><br><span class="line">        return cal.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 生成一个当前时间，插入数据库时可能会多1秒，手动设置毫秒为0</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     * @date 2018年8月25日</span><br><span class="line">     * @author zp</span><br><span class="line">     */</span><br><span class="line">    public static Date getCurrDate() &#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        cal.setTime(new Date());</span><br><span class="line"></span><br><span class="line">        cal.set(Calendar.MILLISECOND, 0);</span><br><span class="line">        return cal.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取某一天的最后一毫秒的日期值</span><br><span class="line">     * </span><br><span class="line">     * @param date</span><br><span class="line">     * @return</span><br><span class="line">     * @date 2018年8月25日</span><br><span class="line">     * @author zp</span><br><span class="line">     */</span><br><span class="line">    public static Date getLastMilliSecond(Date date) &#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        cal.setTime(date);</span><br><span class="line">        cal.set(Calendar.HOUR_OF_DAY, 23);</span><br><span class="line">        cal.set(Calendar.MINUTE, 59);</span><br><span class="line">        cal.set(Calendar.SECOND, 59);</span><br><span class="line">        cal.set(Calendar.MILLISECOND, 999);</span><br><span class="line"></span><br><span class="line">        return cal.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取某天前一日的第一毫秒的日期值</span><br><span class="line">     * </span><br><span class="line">     * @date 2018年8月25日</span><br><span class="line">     * @author zp</span><br><span class="line">     * </span><br><span class="line">     * @param date</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static Date getYesterdayStartTime(Date date) &#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        cal.setTime(date);</span><br><span class="line">        cal.add(Calendar.DAY_OF_MONTH, -1);</span><br><span class="line">        cal.set(Calendar.HOUR_OF_DAY, 0);</span><br><span class="line">        cal.set(Calendar.MINUTE, 0);</span><br><span class="line">        cal.set(Calendar.SECOND, 0);</span><br><span class="line"></span><br><span class="line">        return cal.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取某天前一日的最后一毫秒的日期值</span><br><span class="line">     * </span><br><span class="line">     * @date 2018年8月25日</span><br><span class="line">     * @author zp</span><br><span class="line">     * </span><br><span class="line">     * @param date</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static Date getYesterdayEndMillSecond(Date date) &#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        cal.setTime(date);</span><br><span class="line">        cal.add(Calendar.DAY_OF_MONTH, -1);</span><br><span class="line">        cal.set(Calendar.HOUR_OF_DAY, 23);</span><br><span class="line">        cal.set(Calendar.MINUTE, 59);</span><br><span class="line">        cal.set(Calendar.SECOND, 59);</span><br><span class="line">        cal.set(Calendar.MILLISECOND, 999);</span><br><span class="line"></span><br><span class="line">        return cal.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取指定日期的0点0分的时间</span><br><span class="line">     * </span><br><span class="line">     * @param date</span><br><span class="line">     * @return</span><br><span class="line">     * @date 2018年8月25日</span><br><span class="line">     * @author zp</span><br><span class="line">     */</span><br><span class="line">    public static Date getBeginningOfDay(Date date) &#123;</span><br><span class="line">        return DateUtils.truncate(date, Calendar.DATE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取随机日期</span><br><span class="line">     * </span><br><span class="line">     * @param beginDate 起始日期，格式为：yyyy-MM-dd</span><br><span class="line">     * @param endDate 结束日期，格式为：yyyy-MM-dd</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    public static Date randomDate(String beginDate, String endDate) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            SimpleDateFormat format = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">            Date start = format.parse(beginDate);// 构造开始日期</span><br><span class="line">            Date end = format.parse(endDate);// 构造结束日期</span><br><span class="line">            // getTime()表示返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。</span><br><span class="line">            if (start.getTime() &gt;= end.getTime()) &#123;</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">            long date = random(start.getTime(), end.getTime());</span><br><span class="line"></span><br><span class="line">            return new Date(date);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取随机日期</span><br><span class="line">     * </span><br><span class="line">     * @param start 起始日期</span><br><span class="line">     * @param end 结束日期</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    public static Date randomDate(Date start, Date end) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (start.getTime() &gt;= end.getTime()) &#123;</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">            long date = random(start.getTime(), end.getTime());</span><br><span class="line"></span><br><span class="line">            return new Date(date);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static long random(long begin, long end) &#123;</span><br><span class="line">        long rtn = begin + (long) (Math.random() * (end - begin));</span><br><span class="line">        // 如果返回的是开始时间和结束时间，则递归调用本函数查找随机值</span><br><span class="line">        if (rtn == begin || rtn == end) &#123;</span><br><span class="line">            return random(begin, end);</span><br><span class="line">        &#125;</span><br><span class="line">        return rtn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static Date add(Date date, int type, int value) &#123;</span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        calendar.setTime(date);</span><br><span class="line">        calendar.add(type, value);</span><br><span class="line">        return calendar.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 日期加上月数的时间</span><br><span class="line">     * </span><br><span class="line">     * @param date</span><br><span class="line">     * @param month</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static Date dateAddMonth(Date date, int month) &#123;</span><br><span class="line">        return add(date, Calendar.MONTH, month);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 日期加上天数的时间</span><br><span class="line">     * </span><br><span class="line">     * @param date</span><br><span class="line">     * @param day</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static Date dateAddDay(Date date, int day) &#123;</span><br><span class="line">        return add(date, Calendar.DAY_OF_YEAR, day);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 日期加上年数的时间</span><br><span class="line">     * </span><br><span class="line">     * @param date</span><br><span class="line">     * @param year</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static Date dateAddYear(Date date, int year) &#123;</span><br><span class="line">        return add(date, Calendar.YEAR, year);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 日期加上秒的时间</span><br><span class="line">     * </span><br><span class="line">     * @param date</span><br><span class="line">     * @param year</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static Date dateAddSecond(Date date, int second) &#123;</span><br><span class="line">       return add(date, Calendar.SECOND, second);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判斷一個字符串是不是日期格式</span><br><span class="line">     *</span><br><span class="line">     * @param str</span><br><span class="line">     * @return</span><br><span class="line">     * @date 2018年8月25日</span><br><span class="line">     * @author zp</span><br><span class="line">     */</span><br><span class="line">    public static boolean isValidDate(String str) &#123;</span><br><span class="line">        boolean convertSuccess = true;</span><br><span class="line">        // 指定日期格式为四位年/两位月份/两位日期，注意yyyy/MM/dd区分大小写；</span><br><span class="line">        SimpleDateFormat format = new SimpleDateFormat(STANDARD_DATE_FORMAT2);</span><br><span class="line">        try &#123;</span><br><span class="line">            // 设置lenient为false. 否则SimpleDateFormat会比较宽松地验证日期，比如2007/02/29会被接受，并转换成2007/03/01</span><br><span class="line">            format.setLenient(false);</span><br><span class="line">            format.parse(str);</span><br><span class="line">        &#125; catch (ParseException e) &#123;</span><br><span class="line">            // e.printStackTrace();</span><br><span class="line">            // 如果throw java.text.ParseException或者NullPointerException，就说明格式不对</span><br><span class="line">            convertSuccess = false;</span><br><span class="line">        &#125;</span><br><span class="line">        return convertSuccess;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取当月的 天数</span><br><span class="line">     * */</span><br><span class="line">    public static int getCurrentMonthDay() &#123;</span><br><span class="line"></span><br><span class="line">        Calendar a = Calendar.getInstance();</span><br><span class="line">        a.set(Calendar.DATE, 1);</span><br><span class="line">        a.roll(Calendar.DATE, -1);</span><br><span class="line">        int maxDate = a.get(Calendar.DATE);</span><br><span class="line">        return maxDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 日期转字符串</span><br><span class="line">     * </span><br><span class="line">     * @param date</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String formatDate(Date date) &#123;</span><br><span class="line">        return formatDate(date, STANDARD_TIME_FORMAT2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 日期转字符串</span><br><span class="line">     * </span><br><span class="line">     * @param date</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String formatDate(Date date, String pattern) &#123;</span><br><span class="line">        if (date != null) &#123;</span><br><span class="line">            SimpleDateFormat format = new SimpleDateFormat(pattern);</span><br><span class="line">            return format.format(date);</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 得到时间戳,确保date为&quot;yyyy-MM-dd HH:mm:ss&quot;格式</span><br><span class="line">     * </span><br><span class="line">     * @param date</span><br><span class="line">     */</span><br><span class="line">    public static Long getTimestamp(String date) &#123;</span><br><span class="line">        return getStandardStringDate(date).getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据年份和月份获取当前月的最大天数</span><br><span class="line">     * </span><br><span class="line">     * @author zp</span><br><span class="line">     * @date 2018年8月25日</span><br><span class="line">     * @param year</span><br><span class="line">     * @param month</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static int getMaxDateByYearAndMonth(int year, int month) &#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance(Locale.CHINA);</span><br><span class="line">        cal.set(Calendar.YEAR, year);</span><br><span class="line">        cal.set(Calendar.MONTH, month - 1);</span><br><span class="line">        return cal.getActualMaximum(Calendar.DATE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *</span><br><span class="line">     * @Title: getNatureMonthDate</span><br><span class="line">     * @Description: 获得几个自然月内最后时间</span><br><span class="line">     * @param @param date</span><br><span class="line">     * @param @param monthNum</span><br><span class="line">     * @param @return 设定文件</span><br><span class="line">     * @return Date 返回类型</span><br><span class="line">     * @throws</span><br><span class="line">     */</span><br><span class="line">    public static Date getNatureMonthDate(Date date, int monthNum) &#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        cal.setTime(date);</span><br><span class="line">        cal.set(Calendar.DAY_OF_MONTH, 1);// 设置为1号,当前日期既为本月第一天</span><br><span class="line">        cal.add(Calendar.MONTH, monthNum);// 月增加 几个月</span><br><span class="line">        cal.add(Calendar.DAY_OF_MONTH, -1);// 日期倒数一日,既得到本月最后一天</span><br><span class="line">        cal.set(Calendar.HOUR_OF_DAY, 23);</span><br><span class="line">        cal.set(Calendar.MINUTE, 59);</span><br><span class="line">        cal.set(Calendar.SECOND, 59);</span><br><span class="line">        return cal.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 计算两个日期见相差多少天</span><br><span class="line">     *</span><br><span class="line">     * @param startDate</span><br><span class="line">     * @param endDate</span><br><span class="line">     * @return</span><br><span class="line">     * @throws ParseException</span><br><span class="line">     * @date 2018年8月25日</span><br><span class="line">     * @author zp</span><br><span class="line">     */</span><br><span class="line">    public static int daysBetween(Date startDate, Date endDate) &#123;</span><br><span class="line">        SimpleDateFormat sdf = new SimpleDateFormat(STANDARD_DATE_FORMAT2);</span><br><span class="line">        try &#123;</span><br><span class="line">            startDate = sdf.parse(sdf.format(startDate));</span><br><span class="line">            endDate = sdf.parse(sdf.format(endDate));</span><br><span class="line">        &#125; catch (ParseException e) &#123;&#125;</span><br><span class="line"></span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line"></span><br><span class="line">        cal.setTime(startDate);</span><br><span class="line">        long time1 = cal.getTimeInMillis();</span><br><span class="line"></span><br><span class="line">        cal.setTime(endDate);</span><br><span class="line">        long time2 = cal.getTimeInMillis();</span><br><span class="line"></span><br><span class="line">        long betweenDays = (time2 - time1) / (1000 * 3600 * 24);</span><br><span class="line"></span><br><span class="line">        return Integer.parseInt(String.valueOf(betweenDays));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 根据样式获取日期的字符串</span><br><span class="line">     * @param pattern</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String getDateStr(String pattern) &#123;</span><br><span class="line">        SimpleDateFormat sdf=new SimpleDateFormat(pattern);</span><br><span class="line">        return sdf.format(new Date());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    private static String unitFormat(int i) &#123;</span><br><span class="line">        String retStr = null;</span><br><span class="line">        if (i &gt;= 0 &amp;&amp; i &lt; 10)</span><br><span class="line">            retStr = &quot;0&quot; + Integer.toString(i);</span><br><span class="line">        else</span><br><span class="line">            retStr = &quot;&quot; + i;</span><br><span class="line">        return retStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * </span><br><span class="line">     * @功能描述: int 转换为&quot;20:59:30&quot; </span><br><span class="line">     * @param time</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception </span><br><span class="line">     * @Author:konglingbo</span><br><span class="line">     * @date:2018年12月21日  下午8:58:33</span><br><span class="line">     * @Version:1.1.0</span><br><span class="line">     */</span><br><span class="line">    public static String secToTime(int time) throws Exception &#123;</span><br><span class="line">        String timeStr = null;</span><br><span class="line">        int hour = 0;</span><br><span class="line">        int minute = 0;</span><br><span class="line">        int second = 0;</span><br><span class="line">        if (time &lt;= 0)</span><br><span class="line">            return null;</span><br><span class="line">        else &#123;</span><br><span class="line">            minute = time / 60;</span><br><span class="line">            if (minute &lt; 60) &#123;</span><br><span class="line">                second = time % 60;</span><br><span class="line">                timeStr =&quot;00&quot;+ unitFormat(minute) + &quot;:&quot; + unitFormat(second);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                hour = minute / 60;</span><br><span class="line">                if (hour &gt; 24) &#123;</span><br><span class="line">                   throw new Exception(&quot;数值大于24h,无法转换！&quot;);</span><br><span class="line">                &#125;    </span><br><span class="line">                minute = minute % 60;</span><br><span class="line">                second = time - hour * 3600 - minute * 60;</span><br><span class="line">                timeStr = unitFormat(hour) + &quot;:&quot; + unitFormat(minute) + &quot;:&quot; + unitFormat(second);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return timeStr;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * </span><br><span class="line">     * @功能描述:hh:mm:ss 转换为sec</span><br><span class="line">     * @param time</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception</span><br><span class="line">     * @Author:konglingbo</span><br><span class="line">     * @date:2018年12月21日  下午9:13:38</span><br><span class="line">     * @Version:1.1.0</span><br><span class="line">     */</span><br><span class="line">    public static  int timeToSec(String time) throws Exception &#123;</span><br><span class="line">       if(StringUtils.isEmpty(time)) &#123;</span><br><span class="line">          return 0;</span><br><span class="line">       &#125;</span><br><span class="line">       String[] timeArr=time.split(&quot;:&quot;);</span><br><span class="line">      if(timeArr.length!=3) &#123;</span><br><span class="line">         throw new Exception(&quot;时间不符合格式:hh:mm:ss&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">      time=&quot;1970-01-01 &quot;+time;</span><br><span class="line">      SimpleDateFormat sdf= new  SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">        Date start = sdf.parse(time);</span><br><span class="line">        int hours = start.getHours();</span><br><span class="line">        int minutes = start.getMinutes();</span><br><span class="line">        int seconds = start.getSeconds();</span><br><span class="line">        int totalSeconds=hours*60*60+minutes*60+seconds;</span><br><span class="line">       return totalSeconds;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 返回日时分秒</span><br><span class="line">     * @param second</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String secondToTime(long ms) &#123;</span><br><span class="line">        Integer ss = 1000;  </span><br><span class="line">        Integer mi = ss * 60;  </span><br><span class="line">        Integer hh = mi * 60;  </span><br><span class="line">        Integer dd = hh * 24;  </span><br><span class="line"></span><br><span class="line">        Long day = ms / dd;  </span><br><span class="line">        Long hour = (ms - day * dd) / hh;  </span><br><span class="line">        Long minute = (ms - day * dd - hour * hh) / mi;  </span><br><span class="line">        Long second = (ms - day * dd - hour * hh - minute * mi) / ss;  </span><br><span class="line">        Long milliSecond = ms - day * dd - hour * hh - minute * mi - second * ss;  </span><br><span class="line"></span><br><span class="line">        StringBuffer sb = new StringBuffer();  </span><br><span class="line">        if(day &gt; 0) &#123;  </span><br><span class="line">            sb.append(day+&quot;天&quot;);  </span><br><span class="line">        &#125;  </span><br><span class="line">        if(hour &gt; 0) &#123;  </span><br><span class="line">            sb.append(hour+&quot;:&quot;);  </span><br><span class="line">        &#125;  </span><br><span class="line">        if(minute &gt; 0) &#123;  </span><br><span class="line">            sb.append(minute+&quot;:&quot;);  </span><br><span class="line">        &#125;  </span><br><span class="line">        if(second &gt; 0) &#123;  </span><br><span class="line">            sb.append(second);  </span><br><span class="line">        &#125;  </span><br><span class="line">        if(milliSecond &gt; 0) &#123;  </span><br><span class="line">            sb.append(milliSecond+&quot;毫秒&quot;);  </span><br><span class="line">        &#125;  </span><br><span class="line">        return sb.toString();  </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    /**</span><br><span class="line">     * </span><br><span class="line">     * @功能描述: YYYYMMDDHHMMSS+6位自增长码(20位)</span><br><span class="line">     * @return</span><br><span class="line">     * String </span><br><span class="line">     * @Author:xiaojianyu</span><br><span class="line">     * @date:2019年1月4日下午2:52:03</span><br><span class="line">     * @Version:1.1.0</span><br><span class="line">     */</span><br><span class="line">   public static synchronized String getLocalTrmSeqNum() &#123;</span><br><span class="line">      sequence = sequence &gt;= 999999 ? 1 : sequence + 1;</span><br><span class="line">      String datetime = new SimpleDateFormat(&quot;yyyyMMddHHmmss&quot;)</span><br><span class="line">      .format(new Date());</span><br><span class="line">      String s = Integer.toString(sequence);</span><br><span class="line">      return datetime +addLeftZero(s, length);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   /**</span><br><span class="line">    * </span><br><span class="line">    * @功能描述: 左填0</span><br><span class="line">    * @param s</span><br><span class="line">    * @param length</span><br><span class="line">    * @return</span><br><span class="line">    * String </span><br><span class="line">    * @Author:xiaojianyu</span><br><span class="line">    * @date:2019年1月4日下午2:51:56</span><br><span class="line">    * @Version:1.1.0</span><br><span class="line">    */</span><br><span class="line">   public static String addLeftZero(String s, int length) &#123;</span><br><span class="line">      // StringBuilder sb=new StringBuilder();</span><br><span class="line">      int old = s.length();</span><br><span class="line">      if (length &gt; old) &#123;</span><br><span class="line">         char[] c = new char[length];</span><br><span class="line">         char[] x = s.toCharArray();</span><br><span class="line">         if (x.length &gt; length) &#123;</span><br><span class="line">            throw new IllegalArgumentException(</span><br><span class="line">                  &quot;Numeric value is larger than intended length: &quot; + s</span><br><span class="line">                        + &quot; LEN &quot; + length);</span><br><span class="line">         &#125;</span><br><span class="line">         int lim = c.length - x.length;</span><br><span class="line">         for (int i = 0; i &lt; lim; i++) &#123;</span><br><span class="line">            c[i] = &apos;0&apos;;</span><br><span class="line">         &#125;</span><br><span class="line">         System.arraycopy(x, 0, c, lim, x.length);</span><br><span class="line">         return new String(c);</span><br><span class="line">      &#125;</span><br><span class="line">      return s.substring(0, length);</span><br><span class="line"> </span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   public static Date getBeginningOfDaySafe(Date date) &#123;</span><br><span class="line">      if(null==date) &#123;</span><br><span class="line">         return date;</span><br><span class="line">      &#125;</span><br><span class="line">      return getBeginningOfDay(date);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">   public static Date getLastMilliSecondSafe(Date date) &#123;</span><br><span class="line">      if(null==date) &#123;</span><br><span class="line">         return date;</span><br><span class="line">      &#125;</span><br><span class="line">      return getLastMilliSecond(date);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天写过一篇，java8 date 的文章，今天项目弄完了。学以致用，这里自己封装了一个工具类&lt;/p&gt;
    
    </summary>
    
    
      <category term="java8 date" scheme="http://yoursite.com/tags/java8-date/"/>
    
  </entry>
  
  <entry>
    <title>IO AIO BIO NIO 同步，异步，阻塞和非阻塞</title>
    <link href="http://yoursite.com/2019/04/01/io/"/>
    <id>http://yoursite.com/2019/04/01/io/</id>
    <published>2019-04-01T07:17:42.000Z</published>
    <updated>2019-03-31T12:55:30.723Z</updated>
    
    <content type="html"><![CDATA[<p># </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;# &lt;/p&gt;

      
    
    </summary>
    
    
      <category term="java8" scheme="http://yoursite.com/tags/java8/"/>
    
  </entry>
  
  <entry>
    <title>JAVA8 新的时间和日期API</title>
    <link href="http://yoursite.com/2019/04/01/java8date/"/>
    <id>http://yoursite.com/2019/04/01/java8date/</id>
    <published>2019-04-01T07:17:42.000Z</published>
    <updated>2019-03-27T09:03:35.905Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java8日期-时间的介绍"><a href="#Java8日期-时间的介绍" class="headerlink" title="Java8日期/时间的介绍"></a>Java8日期/时间的介绍</h1><p>Java 8 日期/时间（Date/Time）API 是开发人员最受追捧的变化之一，java从一开始就没有对日期时间处理的一致性方法，因此日期/时间API也是除Java核心API以外另一项倍受欢迎的内容。</p><h2 id="Java8-中新的时间日期API解决了什么问题？"><a href="#Java8-中新的时间日期API解决了什么问题？" class="headerlink" title="Java8 中新的时间日期API解决了什么问题？"></a>Java8 中新的时间日期API解决了什么问题？</h2><p>1.java8 之前的日期/时间类的定义不一致，在java.util和java.sql的包中都有日期类，此外用于格式化和解析的类(SimpleDateFormat)在java.text包中定义。</p><p>2.所以的日期类都是可变的，因此他们都不是线程安全的，这是Java日期类的最大的问题之一。</p><p>3.日期类并不提供国际化。</p><p>4.月份从<strong>o</strong>开始计算。</p><h2 id="Java8-日期时间API的介绍"><a href="#Java8-日期时间API的介绍" class="headerlink" title="Java8 日期时间API的介绍"></a>Java8 日期时间API的介绍</h2><p>Java 8  日期/时间（java.time包下）主要介绍LocalDate 、 LocalTime 、 Instant 、 Duration 以及 Period</p><p>1.使用 LocalDate 和 LocalTime</p><p>①LocalDate:该类的实例是一个不可变的对象，只提供了简单的日期，并不包含当天的时间信息，也不附带任何与时区相关的信息。代码清单如下：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 使用localDate 静态工厂方法of 创建一个LocalDate实例</span><br><span class="line">LocalDate date = LocalDate.of(2019, 3, 26);</span><br><span class="line">// 获取年月日 API</span><br><span class="line">//年</span><br><span class="line">int year = date.getYear();</span><br><span class="line">// 月</span><br><span class="line">Month month = date.getMonth();</span><br><span class="line">// 日</span><br><span class="line">int dayOfMonth = date.getDayOfMonth();</span><br><span class="line">// 星期几</span><br><span class="line">DayOfWeek dayOfWeek = date.getDayOfWeek();</span><br><span class="line">// 这月有多少天</span><br><span class="line">int i = date.lengthOfMonth();</span><br><span class="line">// 是否为闰年</span><br><span class="line">boolean leapYear = date.isLeapYear();</span><br><span class="line">// 获取当前系统时间</span><br><span class="line">LocalDate today = LocalDate.now();</span><br></pre></td></tr></table></figure><p>②LocalTime:该类表示一天中的时间，可以通过静态工程方法of创建实例，of有两个重载的方法，第一个方法可以传入小时，分钟。第二个方法可以传入时分秒。代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 创建 LocalTime 实例</span><br><span class="line">LocalTime time = LocalTime.of(21, 12, 20);</span><br><span class="line">//  获取小时</span><br><span class="line">int hour = time.getHour();</span><br><span class="line">// 获取分钟</span><br><span class="line">int minute = time.getMinute();</span><br><span class="line">// 获取 秒</span><br><span class="line">int second = time.getSecond();</span><br></pre></td></tr></table></figure><p>总结：LocalTime和LocalDate都可以通过解析代表他们的字符串创建，使用静态方法parse,如若传递的字符串无法被解析为合法的LocalDate和LocalTime 就会抛出一个继承与RuntimeException的DateTimePaseException异常。代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LocalTime time = LocalTime.parse(&quot;21:19:00&quot;);</span><br><span class="line">LocalDate date = LocalDate.parse(&quot;2019-3-26&quot;);</span><br></pre></td></tr></table></figure><p>2.LocalDateTime:该类是LocalDate和LocalTime的合体。它同时表示了日期和时间，但不带有时区信息。</p><p>①创建LocalDateTime 对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LocalTime time = LocalTime.parse(&quot;21:19:00&quot;);</span><br><span class="line">LocalDate date = LocalDate.parse(&quot;2019-3-26&quot;);</span><br><span class="line">LocalDateTime dateTime = LocalDateTime.of(2019, 3, 26, 21, 26, 55);</span><br><span class="line">LocalDateTime dateTime1 = LocalDateTime.of(date, time);</span><br><span class="line">LocalDateTime dateTime2 = date.atTime(21, 28, 45);</span><br><span class="line">LocalDateTime dateTime3 = date.atTime(time);</span><br><span class="line">LocalDateTime dateTime4 = time.atDate(date);</span><br></pre></td></tr></table></figure><p>②从LocalDateTime中提取出LocalDate和LocaTime:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LocalDate localDate = dateTime.toLocalDate();</span><br><span class="line">LocalTime localTime = dateTime.toLocalTime();</span><br></pre></td></tr></table></figure><p>3.Instant :该类表示的是距离UTC时区1970年1月1日午夜时分的毫秒数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 获取当前时间戳</span><br><span class="line">Instant now = Instant.now();</span><br><span class="line">//获取当前的时间，获取的是当前的美国时间，和处于东八区的我们相差八个小时。</span><br><span class="line">System.out.println(now);//  输出结果 ：2019-03-26T13:53:42.642Z</span><br><span class="line">// 设置偏移量</span><br><span class="line">OffsetDateTime offsetDateTime = now.atOffset(ZoneOffset.ofHours(8));</span><br><span class="line">System.out.println(offsetDateTime);// 输出结果 2019-03-26T21:56:20.915+08:00</span><br><span class="line">// 获取默认时区时间</span><br><span class="line">ZonedDateTime zonedDateTime = now.atZone(ZoneId.systemDefault());</span><br><span class="line">System.out.println(zonedDateTime); // 输出结果 2019-03-26T22:00:24.783+08:00[Asia/Shanghai]</span><br><span class="line">//在计算机元年（1970-01-01  00：00：00）的基础上增加秒数</span><br><span class="line">Instant instant = Instant.ofEpochSecond(200);</span><br><span class="line">System.out.println(instant); // 输出结果 ：1970-01-01T00:03:20Z</span><br></pre></td></tr></table></figure><p>4.Duration:该类是用来表示时间之间间隔，经常和Instant集合起来使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Instant inst1 = Instant.now();</span><br><span class="line">System.out.println(&quot;Inst1 : &quot; + inst1); // Inst1 : 2019-03-26T14:21:14.343Z</span><br><span class="line">Instant inst2 = inst1.plus(Duration.ofSeconds(10));</span><br><span class="line">System.out.println(&quot;Inst2 : &quot; + inst2); // Inst2 : 2019-03-26T14:21:24.343Z</span><br><span class="line">System.out.println(&quot;Difference in milliseconds : &quot; + Duration.between(inst1, inst2).toMillis()); //Difference in milliseconds : 10000</span><br><span class="line">System.out.println(&quot;Difference in seconds : &quot; + Duration.between(inst1, inst2).getSeconds());  // Difference in seconds : 10</span><br></pre></td></tr></table></figure><p>5.Period：用来计算日期之间的间隔，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LocalDate today = LocalDate.now();</span><br><span class="line">System.out.println(&quot;Today : &quot; + today); // Today : 2019-03-26</span><br><span class="line">LocalDate birthDate = LocalDate.of(1995, Month.OCTOBER, 19);</span><br><span class="line">System.out.println(&quot;BirthDate : &quot; + birthDate); // BirthDate : 1995-10-19</span><br><span class="line">Period p = Period.between(birthDate, today);</span><br><span class="line">System.out.printf(&quot;年龄 : %d 年 %d 月 %d 日&quot;, p.getYears(), p.getMonths(), p.getDays());// 年龄 : 23 年 5 月 7 日</span><br></pre></td></tr></table></figure><p>6.ChronoUnit：用于在单个时间单位内测量一段时间，例如天数或秒。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LocalDate start = LocalDate.of(1995,10, 11);</span><br><span class="line">System.out.println(&quot;开始时间：&quot;+start);//开始时间：1995-10-11</span><br><span class="line">LocalDate end = LocalDate.now();</span><br><span class="line">System.out.println(&quot;结束时间:&quot;+end);// 结束时间:2019-03-26</span><br><span class="line">long day = ChronoUnit.DAYS.between(start, end);</span><br><span class="line">System.out.println(&quot;两个时间相差多少天&quot;+day);//两个时间相差多少天8567</span><br></pre></td></tr></table></figure><h2 id="操纵，解析，格式化日期"><a href="#操纵，解析，格式化日期" class="headerlink" title="操纵，解析，格式化日期"></a>操纵，解析，格式化日期</h2><h3 id="操纵日期"><a href="#操纵日期" class="headerlink" title="操纵日期"></a>操纵日期</h3><p>1.当我们得到了一个LocalDate对象后，想要创建一个它的修改版，可以使用他的withAttribute方法。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LocalDate date = LocalDate.now();</span><br><span class="line">System.out.println(&quot;当前时间：&quot;+date); // 当前时间：2019-03-26</span><br><span class="line">LocalDate localDate = date.withYear(2018);</span><br><span class="line">System.out.println(&quot;修改年之后：&quot;+localDate); // 2018-03-26</span><br><span class="line">LocalDate localDate1 = date.withMonth(1);</span><br><span class="line">System.out.println(&quot;修改月之后的：&quot;+localDate1);// 2019-01-26</span><br></pre></td></tr></table></figure><p>2.TemporalAdjuster:使用该类完成一些复杂的业务需求，如将时间调整到下个工作日，下个周日，或者是本月的最后一天。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LocalDate date1 = LocalDate.of(2019, 3, 26);</span><br><span class="line">System.out.println(&quot;当前时间：&quot;+date1);// 当前时间：2019-03-26</span><br><span class="line">LocalDate date2 = date1.with(nextOrSame(DayOfWeek.SUNDAY));</span><br><span class="line">System.out.println(&quot;下一个星期天：&quot;+date2);//下一个星期天：2019-03-31</span><br><span class="line">LocalDate date3 = date2.with(lastDayOfMonth());</span><br><span class="line">System.out.println(&quot;这个月的最后一天：&quot;+date3);//这个月的最后一天：2019-03-31</span><br></pre></td></tr></table></figure><p>更多api如下图：</p><p><img src="/2019/04/01/java8date/TemporalAdjuster.jpg" alt></p><p>3.自定义一个TemporalAdjuster：</p><p>设计一个 NextWorkingDay 类，该类实现了 TemporalAdjuster 接口，能够计算明天<br>的日期，同时过滤掉周六和周日这些节假日。格式如下所示：<br>date = date.with(new NextWorkingDay());<br>如果当天的星期介于周一至周五之间，日期向后移动一天；如果当天是周六或者周日，则<br>返回下一个周一。代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class NextWorkDayTemporalAdjuster implements TemporalAdjuster &#123;</span><br><span class="line">        // 如果当前时间是星期到星期五 就加一天 如果是想起六天 就返回下个星期一的时间</span><br><span class="line">        @Override</span><br><span class="line">        public Temporal adjustInto(Temporal temporal) &#123;</span><br><span class="line">            DayOfWeek now = DayOfWeek.of( temporal.get(ChronoField.DAY_OF_WEEK));</span><br><span class="line">            // 默认是加一天</span><br><span class="line">            int dayofAdd=1;</span><br><span class="line">            // 如果是星期五 就加三天</span><br><span class="line">            if (now==DayOfWeek.FRIDAY)dayofAdd=3;</span><br><span class="line">            else if (now==DayOfWeek.FRIDAY) dayofAdd=2;</span><br><span class="line">            return temporal.plus(dayofAdd, ChronoUnit.DAYS);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.使用自己的自定义的TemporalAdjuster：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LocalDate now = LocalDate.now();</span><br><span class="line">DateTimeFormatter yyyyMMdd = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">String format = yyyyMMdd.format(now);</span><br><span class="line">System.out.println(&quot;当前时间为：&quot;+format);// 当前时间为：2019-03-27</span><br><span class="line">LocalDate with = now.with(new NextWorkDayTemporalAdjuster());</span><br><span class="line">DateTimeFormatter yyyyMMdd1 = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">String formatafter = yyyyMMdd.format(with);</span><br><span class="line">System.out.println(&quot;下一个工作日为：&quot;+formatafter);// 下一个工作日为：2019-03-28</span><br></pre></td></tr></table></figure><h3 id="解析，格式化日期"><a href="#解析，格式化日期" class="headerlink" title="解析，格式化日期"></a>解析，格式化日期</h3><p>1.在日常工作经常会遇到需要指定格式的日期时间，在java.time.format包下的DateTimeFormatter 可以满足我们的这一需求。代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LocalDate now = LocalDate.now();</span><br><span class="line">DateTimeFormatter yyyyMMdd = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">String format = yyyyMMdd.format(now);</span><br><span class="line">System.out.println(&quot;当前时间为：&quot;+format);// 当前时间为：2019-03-27</span><br></pre></td></tr></table></figure><h2 id="java-8-中不同的时区和历法的问题的解决方案"><a href="#java-8-中不同的时区和历法的问题的解决方案" class="headerlink" title="java 8 中不同的时区和历法的问题的解决方案"></a>java 8 中不同的时区和历法的问题的解决方案</h2><p>新的 java.time.ZoneId类是老版 java.util.TimeZone 的替代品。它的设计目标就是要让你无需为时区处理的复杂和<br>繁琐而操心，比如处理日光时（Daylight Saving Time，DST）这种问题。跟其他日期和时间类一样， ZoneId 类也是无法修改的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java8日期-时间的介绍&quot;&gt;&lt;a href=&quot;#Java8日期-时间的介绍&quot; class=&quot;headerlink&quot; title=&quot;Java8日期/时间的介绍&quot;&gt;&lt;/a&gt;Java8日期/时间的介绍&lt;/h1&gt;&lt;p&gt;Java 8 日期/时间（Date/Time）API 是开发人员最受追捧的变化之一，java从一开始就没有对日期时间处理的一致性方法，因此日期/时间API也是除Java核心API以外另一项倍受欢迎的内容。&lt;/p&gt;
&lt;h2 id=&quot;Java8-中新的时间日期API解决了什么问题？&quot;&gt;&lt;a href=&quot;#Java8-中新的时间日期API解决了什么问题？&quot; class=&quot;headerlink&quot; title=&quot;Java8 中新的时间日期API解决了什么问题？&quot;&gt;&lt;/a&gt;Java8 中新的时间日期API解决了什么问题？&lt;/h2&gt;&lt;p&gt;1.java8 之前的日期/时间类的定义不一致，在java.util和java.sql的包中都有日期类，此外用于格式化和解析的类(SimpleDateFormat)在java.text包中定义。&lt;/p&gt;
&lt;p&gt;2.所以的日期类都是可变的，因此他们都不是线程安全的，这是Java日期类的最大的问题之一。&lt;/p&gt;
&lt;p&gt;3.日期类并不提供国际化。&lt;/p&gt;
&lt;p&gt;4.月份从&lt;strong&gt;o&lt;/strong&gt;开始计算。&lt;/p&gt;
&lt;h2 id=&quot;Java8-日期时间API的介绍&quot;&gt;&lt;a href=&quot;#Java8-日期时间API的介绍&quot; class=&quot;headerlink&quot; title=&quot;Java8 日期时间API的介绍&quot;&gt;&lt;/a&gt;Java8 日期时间API的介绍&lt;/h2&gt;&lt;p&gt;Java 8  日期/时间（java.time包下）主要介绍LocalDate 、 LocalTime 、 Instant 、 Duration 以及 Period&lt;/p&gt;
&lt;p&gt;1.使用 LocalDate 和 LocalTime&lt;/p&gt;
&lt;p&gt;①LocalDate:该类的实例是一个不可变的对象，只提供了简单的日期，并不包含当天的时间信息，也不附带任何与时区相关的信息。代码清单如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="java8" scheme="http://yoursite.com/tags/java8/"/>
    
  </entry>
  
  <entry>
    <title>JAVA8 新的时间和日期API</title>
    <link href="http://yoursite.com/2019/03/30/java%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%9678%E6%9D%A1%E5%BB%BA%E8%AE%AE/"/>
    <id>http://yoursite.com/2019/03/30/java代码优化78条建议/</id>
    <published>2019-03-30T04:35:00.000Z</published>
    <updated>2019-04-12T03:19:42.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建和销毁对象"><a href="#创建和销毁对象" class="headerlink" title="创建和销毁对象"></a>创建和销毁对象</h1><h2 id="1-考虑用静态工厂方法代替构造器"><a href="#1-考虑用静态工厂方法代替构造器" class="headerlink" title="1.考虑用静态工厂方法代替构造器"></a>1.考虑用静态工厂方法代替构造器</h2><p>当我们使用构造器构造对象的时候，但是我们的创建的类的属性，没有加属性注释，并且变量名也毫无意义，这样的创建方式，代码的可读性非常差。所以可以考虑用静态工厂，设定指定的方法名，并且根据不同的需求提供不同的静态工厂方法，这样代码的可读性就提高了。如Boolean类的静态工厂方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static Boolean valueOf(boolean b) &#123;</span><br><span class="line">    return (b ? TRUE : FALSE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-遇到多个构造器参数时要考虑用构建器"><a href="#2-遇到多个构造器参数时要考虑用构建器" class="headerlink" title="2.遇到多个构造器参数时要考虑用构建器"></a>2.遇到多个构造器参数时要考虑用构建器</h2><p>当我们 遇到一个需求，需要构建一个类，该类有很多的属性，有些属性是可选的，有些属性是必选的，这时我们使用常用的通过构造不同的构造器去构建这样的类，会显得很繁琐，而且也不易阅读。而使用该类的set方法去设置这些属性时，会有线程安全的问题！此时可以考虑用构建器去实现这一的需求，而且代码的可读行也强，代码如下:</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">public class NutritionFacts &#123;</span><br><span class="line">    private final int servingsize;</span><br><span class="line">    private final int servings;</span><br><span class="line">    private final  int calories;</span><br><span class="line">    private final int fat ;</span><br><span class="line">    private final int  sodium;</span><br><span class="line">    private final  int carbohydrate;</span><br><span class="line">    public  static class Builder&#123;</span><br><span class="line">        // 必选参数</span><br><span class="line">        private  int servingsize;</span><br><span class="line">        private  int servings;</span><br><span class="line">        // 可选参数</span><br><span class="line">        private   int calories=0;</span><br><span class="line">        private  int fat=0 ;</span><br><span class="line">        private  int  sodium=0;</span><br><span class="line">        private   int carbohydrate=0;</span><br><span class="line">        public Builder(int servingsize,int servings)&#123;</span><br><span class="line">            this.servings=servings;</span><br><span class="line">            this.servingsize=servingsize;</span><br><span class="line">        &#125;</span><br><span class="line">        public Builder calories(int calories)&#123;</span><br><span class="line">            this.calories=calories;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line">        public Builder fat(int fat)&#123;</span><br><span class="line">            this.fat=fat;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line">        public Builder sodium(int sodium)&#123;</span><br><span class="line">            this.sodium=sodium;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line">        public Builder carbohydrate(int carbohydrate)&#123;</span><br><span class="line">            this.carbohydrate=carbohydrate;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line">        public  NutritionFacts builder()&#123;</span><br><span class="line">            return  new NutritionFacts(this);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private NutritionFacts(Builder builder)&#123;</span><br><span class="line">        this.calories=builder.calories;</span><br><span class="line">        this.carbohydrate=builder.carbohydrate;</span><br><span class="line">        this.fat=builder.fat;</span><br><span class="line">        this.servings=builder.servings;</span><br><span class="line">        this.servingsize=builder.servingsize;</span><br><span class="line">        this.sodium=builder.sodium;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 使用该类</span><br><span class="line">        NutritionFacts builder = new Builder(10, 20).builder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-用私有构造器或者枚举类型强化Singleton属性"><a href="#3-用私有构造器或者枚举类型强化Singleton属性" class="headerlink" title="3.用私有构造器或者枚举类型强化Singleton属性"></a>3.用私有构造器或者枚举类型强化Singleton属性</h2><h2 id="4-通过私有构造器强化不可实例化的能力"><a href="#4-通过私有构造器强化不可实例化的能力" class="headerlink" title="4.通过私有构造器强化不可实例化的能力"></a>4.通过私有构造器强化不可实例化的能力</h2><h2 id="5-避免创建不必要的对象"><a href="#5-避免创建不必要的对象" class="headerlink" title="5.避免创建不必要的对象"></a>5.避免创建不必要的对象</h2><h2 id="6-消除过期的对象引用"><a href="#6-消除过期的对象引用" class="headerlink" title="6.消除过期的对象引用"></a>6.消除过期的对象引用</h2><h2 id="7-避免使用终结方法"><a href="#7-避免使用终结方法" class="headerlink" title="7.避免使用终结方法"></a>7.避免使用终结方法</h2><h1 id="对于所有对象都通用的方法"><a href="#对于所有对象都通用的方法" class="headerlink" title="对于所有对象都通用的方法"></a>对于所有对象都通用的方法</h1><p>8.覆盖equals时请遵守通用约定</p><p>9.覆盖equals时总要覆盖hashCode</p><p>10.始终要覆盖toString</p><p>11.谨慎地覆盖clone</p><p>12考虑实现Comparable接口</p><h1 id="类和接口"><a href="#类和接口" class="headerlink" title="类和接口"></a>类和接口</h1><p>13.使类和成员的可访问性最小化</p><p>14.在公有类中使用访问方法而非公有域</p><p>15.使可变性最小化</p><p>16.复合优先于继承</p><p>17.要么为继承而设计，并提供文档说明，要么就禁止继承</p><p>18.接口优先于抽象类</p><p>19.接口只要于定义类型</p><p>20.类层次优先于标签类</p><p>21.用函数对象表示策略</p><p>22.优先考虑静态成员类</p><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>23.请不要在新代码中使用原生态类型</p><p>24.消除非受检警告</p><p>25.列表优先于数组</p><p>26.优先考虑泛型</p><p>27.优先考虑泛型方法</p><p>28.利用有限制通配符来提升API的灵活性</p><p>29.优先考虑类型安全的异构容器</p><h1 id="枚举和注解"><a href="#枚举和注解" class="headerlink" title="枚举和注解"></a>枚举和注解</h1><p>30.用enum代替int常量</p><p>31.用实例域代替序数</p><p>32.用EnumSet代替位域</p><p>33.用EnumMap代替序数索引</p><p>34.用接口模板可伸缩的枚举</p><p>35.注解优先于命名模式</p><p>36.坚持使用override注解</p><p>37.用标记接口定义类型</p><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>38.检查参数的有效性</p><p>39.必要时进行保护性拷贝</p><p>40.谨慎设计方法签名</p><p>41.慎用重载</p><p>42.慎用可变参数</p><p>43.返回零长度的数组或者集合而不是null</p><p>44.为所有的导出API元素编写文档注释</p><h1 id="通用程序设计"><a href="#通用程序设计" class="headerlink" title="通用程序设计"></a>通用程序设计</h1><p>45.将局部变量的作用域最小化</p><p>46.for-each 循环优先于传统的for循环</p><p>47.了解和使用类库</p><p>48.如果需要精确的答案，请避免使用float和double</p><p>49.基本类型优先于装箱基本类型</p><p>50.如果其他类型更适合，则尽量避免使用字符串</p><p>51.当心字符串连接的性能</p><p>52.通用接口引用对象</p><p>53.接口优先于反射机制</p><p>54.谨慎的使用本地方法</p><p>55.谨慎的进行优化</p><p>56.遵守普遍接受的命名惯例</p><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p>57.只针对异常的情况才使用异常</p><p>58.对可恢复的情况使用受检异常，对编程错误使用运行的异常</p><p>59.避免不必要的使用受检的异常</p><p>60.优先使用标准的异常</p><p>61.抛出于抽象相对应的异常</p><p>62.每个方法抛出的异常都要有文档</p><p>63.在细节消息中包含能捕获失败的消息</p><p>64.努力把失败保持原子性</p><p>65.不要忽略异常</p><h1 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h1><p>66.同步访问共享的可变数据</p><p>67.避免过度同步</p><p>68.executor和task优先于线程</p><p>69.并发工具优先于wait和notify</p><p>70.线程安全性的文档化</p><p>71.慎用延迟初始化</p><p>72.不要依赖于线程调度器</p><p>73.避免使用线程组</p><h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><p>74.谨慎的实现serializable接口</p><p>75.考虑使用自定义的序列化形式</p><p>76.保护性地编写readObject方法</p><p>77.对于实例控制，枚举类型优先于readResolve </p><p>78.考虑用序列化代理代替序列化实例</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;创建和销毁对象&quot;&gt;&lt;a href=&quot;#创建和销毁对象&quot; class=&quot;headerlink&quot; title=&quot;创建和销毁对象&quot;&gt;&lt;/a&gt;创建和销毁对象&lt;/h1&gt;&lt;h2 id=&quot;1-考虑用静态工厂方法代替构造器&quot;&gt;&lt;a href=&quot;#1-考虑用静态工厂方法代替构造器&quot; class=&quot;headerlink&quot; title=&quot;1.考虑用静态工厂方法代替构造器&quot;&gt;&lt;/a&gt;1.考虑用静态工厂方法代替构造器&lt;/h2&gt;&lt;p&gt;当我们使用构造器构造对象的时候，但是我们的创建的类的属性，没有加属性注释，并且变量名也毫无意义，这样的创建方式，代码的可读性非常差。所以可以考虑用静态工厂，设定指定的方法名，并且根据不同的需求提供不同的静态工厂方法，这样代码的可读性就提高了。如Boolean类的静态工厂方法：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public static Boolean valueOf(boolean b) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return (b ? TRUE : FALSE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-遇到多个构造器参数时要考虑用构建器&quot;&gt;&lt;a href=&quot;#2-遇到多个构造器参数时要考虑用构建器&quot; class=&quot;headerlink&quot; title=&quot;2.遇到多个构造器参数时要考虑用构建器&quot;&gt;&lt;/a&gt;2.遇到多个构造器参数时要考虑用构建器&lt;/h2&gt;&lt;p&gt;当我们 遇到一个需求，需要构建一个类，该类有很多的属性，有些属性是可选的，有些属性是必选的，这时我们使用常用的通过构造不同的构造器去构建这样的类，会显得很繁琐，而且也不易阅读。而使用该类的set方法去设置这些属性时，会有线程安全的问题！此时可以考虑用构建器去实现这一的需求，而且代码的可读行也强，代码如下:&lt;/p&gt;
    
    </summary>
    
    
      <category term="java代码优化" scheme="http://yoursite.com/tags/java%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>JAVA8使用Stream处理集合</title>
    <link href="http://yoursite.com/2019/03/30/java8Stream/"/>
    <id>http://yoursite.com/2019/03/30/java8Stream/</id>
    <published>2019-03-30T03:09:00.000Z</published>
    <updated>2019-03-30T04:13:20.918Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h1><h2 id="Stream是什么？"><a href="#Stream是什么？" class="headerlink" title="Stream是什么？"></a>Stream是什么？</h2><p><strong>Stream 使用一种类似用 SQL 语句从数据库查询数据的直观方式来提供一种对 Java 集合运算和表达的高阶抽象</strong>。</p><p>Stream API可以极大提高Java程序员的生产力，让程序员写出高效率、干净、简洁的代码。</p><p>这种风格将要处理的元素集合看作一种流，流在管道中传输，并且可以在管道的节点上进行处理，比如筛选，排序，聚合等。</p><p>Stream有以下特性及优点：</p><ul><li>无存储。Stream不是一种数据结构，它只是某种数据源的一个视图，数据源可以是一个数组，Java容器或I/O channel等。</li><li>为函数式编程而生。对Stream的任何修改都不会修改背后的数据源，比如对Stream执行过滤操作并不会删除被过滤的元素，而是会产生一个不包含被过滤元素的新Stream。</li><li>惰式执行。Stream上的操作并不会立即执行，只有等到用户真正需要结果的时候才会执行。</li><li>可消费性。Stream只能被“消费”一次，一旦遍历过就会失效，就像容器的迭代器那样，想要再次遍历必须重新生成。</li></ul><p>我们举一个例子，来看一下到底Stream可以做什么事情：</p><p><img src="/2019/03/30/java8Stream/java8stream.png" alt></p><p>上面的例子中，获取一些带颜色塑料球作为数据源，首先过滤掉红色的、把它们融化成随机的三角形。再过滤器并删除小的三角形。最后计算出剩余图形的周长。</p><p>如上图，对于流的处理，主要有三种关键性操作：分别是流的创建、中间操作（intermediate operation）以及最终操作(terminal operation)。</p><a id="more"></a><h2 id="如何使用Stream"><a href="#如何使用Stream" class="headerlink" title="如何使用Stream?"></a>如何使用Stream?</h2><p><strong>在Java 8中，可以有多种方法来创建流。</strong></p><p><strong>1、通过已有的集合来创建流</strong></p><p>在Java 8中，除了增加了很多Stream相关的类以外，还对集合类自身做了增强，在其中增加了stream方法，可以将一个集合类转换成流。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; strings = Arrays.asList(&quot;zippo&quot;, &quot;zp&quot;, &quot;zulongbo&quot;, &quot;Hello&quot;, &quot;HelloWorld&quot;);</span><br><span class="line">Stream&lt;String&gt; stream = strings.stream();</span><br></pre></td></tr></table></figure><p>以上，通过一个已有的List创建一个流。除此以外，还有一个parallelStream方法，可以为集合创建一个并行流。</p><p>这种通过集合创建出一个Stream的方式也是比较常用的一种方式。</p><p><strong>2、通过Stream创建流</strong></p><p>可以使用Stream类提供的方法，直接返回一个由指定元素组成的流。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.of(&quot;zippo&quot;, &quot;zp&quot;, &quot;zulongbo&quot;, &quot;Hello&quot;, &quot;HelloWorld&quot;);</span><br></pre></td></tr></table></figure><p>如以上代码，直接通过of方法，创建并返回一个Stream。</p><h2 id="Stream的中间操作"><a href="#Stream的中间操作" class="headerlink" title="Stream的中间操作"></a>Stream的中间操作</h2><p><strong>Stream有很多中间操作，多个中间操作可以连接起来形成一个流水线，每一个中间操作就像流水线上的一个工人，每人工人都可以对流进行加工，加工后得到的结果还是一个流。</strong></p><p><img src="/2019/03/30/java8Stream/liushui.jpg" alt></p><p>以下是常用的中间操作列表:</p><p><img src="/2019/03/30/java8Stream/streamapi.png" alt="img"></p><p><strong>filter</strong></p><p>filter 方法用于通过设置的条件过滤出元素。以下代码片段使用 filter 方法过滤掉空字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; strings = Arrays.asList(&quot;Hollis&quot;, &quot;&quot;, &quot;HollisChuang&quot;, &quot;H&quot;, &quot;hollis&quot;);</span><br><span class="line">strings.stream().filter(string -&gt; !string.isEmpty()).forEach(System.out::println);</span><br><span class="line">//Hollis, , HollisChuang, H, hollis</span><br></pre></td></tr></table></figure><p><strong>map</strong></p><p>map 方法用于映射每个元素到对应的结果，以下代码片段使用 map 输出了元素对应的平方数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(3, 2, 2, 3, 7, 3, 5);</span><br><span class="line">numbers.stream().map( i -&gt; i*i).forEach(System.out::println);</span><br><span class="line">//9,4,4,9,49,9,25</span><br></pre></td></tr></table></figure><p><strong>limit/skip</strong></p><p>limit 返回 Stream 的前面 n 个元素；skip 则是扔掉前 n 个元素。以下代码片段使用 limit 方法保理4个元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(3, 2, 2, 3, 7, 3, 5);</span><br><span class="line">numbers.stream().limit(4).forEach(System.out::println);</span><br><span class="line">//3,2,2,3</span><br></pre></td></tr></table></figure><p><strong>sorted</strong></p><p>sorted 方法用于对流进行排序。以下代码片段使用 sorted 方法进行排序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(3, 2, 2, 3, 7, 3, 5);</span><br><span class="line">numbers.stream().sorted().forEach(System.out::println);</span><br><span class="line">//2,2,3,3,3,5,7</span><br></pre></td></tr></table></figure><p><strong>distinct</strong></p><p>distinct主要用来去重，以下代码片段使用 distinct 对元素进行去重：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(3, 2, 2, 3, 7, 3, 5);</span><br><span class="line">numbers.stream().distinct().forEach(System.out::println);</span><br><span class="line">//3,2,7,5</span><br></pre></td></tr></table></figure><p>接下来我们通过一个例子和一张图，来演示下，当一个Stream先后通过filter、map、sort、limit以及distinct处理后会发生什么。</p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; strings = Arrays.asList(&quot;Hollis&quot;, &quot;HollisChuang&quot;, &quot;hollis&quot;, &quot;Hello&quot;, &quot;HelloWorld&quot;, &quot;Hollis&quot;);</span><br><span class="line">Stream s = strings.stream().filter(string -&gt; string.length()&lt;= 6).map(String::length).sorted().limit(3)</span><br><span class="line">            .distinct();</span><br></pre></td></tr></table></figure><p>过程及每一步得到的结果如下图：</p><p><img src="/2019/03/30/java8Stream/last.png" alt="img"></p><h2 id="Stream的最终操作"><a href="#Stream的最终操作" class="headerlink" title="Stream的最终操作"></a>Stream的最终操作</h2><p><strong>Stream的中间操作得到的结果还是一个Stream，那么如何把一个Stream转换成我们需要的类型呢？比如计算出流中元素的个数、将流装换成集合等。这就需要最终操作（terminal operation）</strong></p><p><strong>最终操作会消耗流，产生一个最终结果。也就是说，在最终操作之后，不能再次使用流，也不能在使用任何中间操作，否则将抛出异常：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalStateException: stream has already been operated upon or closed</span><br></pre></td></tr></table></figure><p>俗话说，“你永远不会两次踏入同一条河”也正是这个意思。</p><p>常用的最终操作如下图：￼</p><p><img src="/2019/03/30/java8Stream/last1.png" alt="img"></p><p><strong>forEach</strong></p><p>Stream 提供了方法 ‘forEach’ 来迭代流中的每个数据。以下代码片段使用 forEach 输出了10个随机数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Random random = new Random();</span><br><span class="line">random.ints().limit(10).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p><strong>count</strong></p><p>count用来统计流中的元素个数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; strings = Arrays.asList(&quot;Hollis&quot;, &quot;HollisChuang&quot;, &quot;hollis&quot;,&quot;Hollis666&quot;, &quot;Hello&quot;, &quot;HelloWorld&quot;, &quot;Hollis&quot;);</span><br><span class="line">System.out.println(strings.stream().count());</span><br><span class="line">//7</span><br></pre></td></tr></table></figure><p><strong>collect</strong></p><p>collect就是一个归约操作，可以接受各种做法作为参数，将流中的元素累积成一个汇总结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; strings = Arrays.asList(&quot;Hollis&quot;, &quot;HollisChuang&quot;, &quot;hollis&quot;,&quot;Hollis666&quot;, &quot;Hello&quot;, &quot;HelloWorld&quot;, &quot;Hollis&quot;);</span><br><span class="line">strings  = strings.stream().filter(string -&gt; string.startsWith(&quot;Hollis&quot;)).collect(Collectors.toList());</span><br><span class="line">System.out.println(strings);</span><br><span class="line">//Hollis, HollisChuang, Hollis666, Hollis</span><br></pre></td></tr></table></figure><p>接下来，我们还是使用一张图，来演示下，前文的例子中，当一个Stream先后通过filter、map、sort、limit以及distinct处理后会，在分别使用不同的最终操作可以得到怎样的结果。</p><p>下图，展示了文中介绍的所有操作的位置、输入、输出以及使用一个案例展示了其结果。</p><p><img src="/2019/03/30/java8Stream/last2.jpg" alt="img"></p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p><strong>本文介绍了Java 8中的Stream 的用途，优点等。还接受了Stream的几种用法，分别是Stream创建、中间操作和最终操作。</strong></p><p><strong>Stream的创建有两种方式，分别是通过集合类的stream方法、通过Stream的of方法。</strong></p><p><strong>Stream的中间操作可以用来处理Stream，中间操作的输入和输出都是Stream，中间操作可以是过滤、转换、排序等。</strong></p><p><strong>Stream的最终操作可以将Stream转成其他形式，如计算出流中元素的个数、将流装换成集合、以及元素的遍历等。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Stream&quot;&gt;&lt;a href=&quot;#Stream&quot; class=&quot;headerlink&quot; title=&quot;Stream&quot;&gt;&lt;/a&gt;Stream&lt;/h1&gt;&lt;h2 id=&quot;Stream是什么？&quot;&gt;&lt;a href=&quot;#Stream是什么？&quot; class=&quot;headerlink&quot; title=&quot;Stream是什么？&quot;&gt;&lt;/a&gt;Stream是什么？&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Stream 使用一种类似用 SQL 语句从数据库查询数据的直观方式来提供一种对 Java 集合运算和表达的高阶抽象&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Stream API可以极大提高Java程序员的生产力，让程序员写出高效率、干净、简洁的代码。&lt;/p&gt;
&lt;p&gt;这种风格将要处理的元素集合看作一种流，流在管道中传输，并且可以在管道的节点上进行处理，比如筛选，排序，聚合等。&lt;/p&gt;
&lt;p&gt;Stream有以下特性及优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无存储。Stream不是一种数据结构，它只是某种数据源的一个视图，数据源可以是一个数组，Java容器或I/O channel等。&lt;/li&gt;
&lt;li&gt;为函数式编程而生。对Stream的任何修改都不会修改背后的数据源，比如对Stream执行过滤操作并不会删除被过滤的元素，而是会产生一个不包含被过滤元素的新Stream。&lt;/li&gt;
&lt;li&gt;惰式执行。Stream上的操作并不会立即执行，只有等到用户真正需要结果的时候才会执行。&lt;/li&gt;
&lt;li&gt;可消费性。Stream只能被“消费”一次，一旦遍历过就会失效，就像容器的迭代器那样，想要再次遍历必须重新生成。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们举一个例子，来看一下到底Stream可以做什么事情：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/03/30/java8Stream/java8stream.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;上面的例子中，获取一些带颜色塑料球作为数据源，首先过滤掉红色的、把它们融化成随机的三角形。再过滤器并删除小的三角形。最后计算出剩余图形的周长。&lt;/p&gt;
&lt;p&gt;如上图，对于流的处理，主要有三种关键性操作：分别是流的创建、中间操作（intermediate operation）以及最终操作(terminal operation)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java8" scheme="http://yoursite.com/tags/java8/"/>
    
  </entry>
  
</feed>
